{
  "address": "0xa670eAfE57AD3B4468e3172605a16f3de5E42029",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "ERC721IncorrectOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ERC721InsufficientApproval",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "approver",
          "type": "address"
        }
      ],
      "name": "ERC721InvalidApprover",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "ERC721InvalidOperator",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "ERC721InvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "ERC721InvalidReceiver",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "ERC721InvalidSender",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ERC721NonexistentToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EnforcedPause",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ExpectedPause",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "exp",
          "type": "uint256"
        }
      ],
      "name": "increaseExp",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "increaseLevel",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "mintPet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "resetPet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "hp",
          "type": "uint256"
        }
      ],
      "name": "setHp",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xabe30fd36a349f603cece310b1064c4fcb2bad896acc308fae7a36af56d5fdb5",
  "receipt": {
    "to": null,
    "from": "0x52Fc14303c333DF81487268C3dfc01d6259c7f15",
    "contractAddress": "0xa670eAfE57AD3B4468e3172605a16f3de5E42029",
    "transactionIndex": 4,
    "gasUsed": "4397723",
    "logsBloom": "0x
    "blockHash": "0x46dc6aced9ab4801af809bdba4a1db733b8d1bdaef4279bd551063c2913bef68",
    "transactionHash": "0xabe30fd36a349f603cece310b1064c4fcb2bad896acc308fae7a36af56d5fdb5",
    "logs": [],
    "blockNumber": 1304760,
    "cumulativeGasUsed": "7135096",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "d758455bf782805375a8bd9ca2690776",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721IncorrectOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721InsufficientApproval\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC721InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721NonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EnforcedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExpectedPause\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"exp\",\"type\":\"uint256\"}],\"name\":\"increaseExp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"increaseLevel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"mintPet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"resetPet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hp\",\"type\":\"uint256\"}],\"name\":\"setHp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"ERC721IncorrectOwner(address,uint256,address)\":[{\"details\":\"Indicates an error related to the ownership over a particular token. Used in transfers.\",\"params\":{\"owner\":\"Address of the current owner of a token.\",\"sender\":\"Address whose tokens are being transferred.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InsufficientApproval(address,uint256)\":[{\"details\":\"Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC721InvalidOperator(address)\":[{\"details\":\"Indicates a failure with the `operator` to be approved. Used in approvals.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC721InvalidOwner(address)\":[{\"details\":\"Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20. Used in balance queries.\",\"params\":{\"owner\":\"Address of the current owner of a token.\"}}],\"ERC721InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC721InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC721NonexistentToken(uint256)\":[{\"details\":\"Indicates a `tokenId` whose `owner` is the zero address.\",\"params\":{\"tokenId\":\"Identifier number of a token.\"}}],\"EnforcedPause()\":[{\"details\":\"The operation failed because the contract is paused.\"}],\"ExpectedPause()\":[{\"details\":\"The operation failed because the contract is not paused.\"}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"burn(uint256)\":{\"details\":\"Burns `tokenId`. See {ERC721-_burn}. Requirements: - The caller must own `tokenId` or be an approved operator.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SaiyaPetTest.sol\":\"SaiyaPetTest\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"./IERC721.sol\\\";\\nimport {IERC721Receiver} from \\\"./IERC721Receiver.sol\\\";\\nimport {IERC721Metadata} from \\\"./extensions/IERC721Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {Strings} from \\\"../../utils/Strings.sol\\\";\\nimport {IERC165, ERC165} from \\\"../../utils/introspection/ERC165.sol\\\";\\nimport {IERC721Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\nabstract contract ERC721 is Context, ERC165, IERC721, IERC721Metadata, IERC721Errors {\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    mapping(uint256 tokenId => address) private _owners;\\n\\n    mapping(address owner => uint256) private _balances;\\n\\n    mapping(uint256 tokenId => address) private _tokenApprovals;\\n\\n    mapping(address owner => mapping(address operator => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual returns (uint256) {\\n        if (owner == address(0)) {\\n            revert ERC721InvalidOwner(address(0));\\n        }\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual returns (address) {\\n        return _requireOwned(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual returns (string memory) {\\n        _requireOwned(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string.concat(baseURI, tokenId.toString()) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual {\\n        _approve(to, tokenId, _msgSender());\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual returns (address) {\\n        _requireOwned(tokenId);\\n\\n        return _getApproved(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        // Setting an \\\"auth\\\" arguments enables the `_isAuthorized` check which verifies that the token exists\\n        // (from != 0). Therefore, it is not needed to verify that the return value is not 0 here.\\n        address previousOwner = _update(to, tokenId, _msgSender());\\n        if (previousOwner != from) {\\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\\n        }\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual {\\n        transferFrom(from, to, tokenId);\\n        _checkOnERC721Received(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     *\\n     * IMPORTANT: Any overrides to this function that add ownership of tokens not tracked by the\\n     * core ERC721 logic MUST be matched with the use of {_increaseBalance} to keep balances\\n     * consistent with ownership. The invariant to preserve is that for any address `a` the value returned by\\n     * `balanceOf(a)` must be equal to the number of tokens such that `_ownerOf(tokenId)` is `a`.\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns the approved address for `tokenId`. Returns 0 if `tokenId` is not minted.\\n     */\\n    function _getApproved(uint256 tokenId) internal view virtual returns (address) {\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `owner`'s tokens, or `tokenId` in\\n     * particular (ignoring whether it is owned by `owner`).\\n     *\\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\\n     * assumption.\\n     */\\n    function _isAuthorized(address owner, address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        return\\n            spender != address(0) &&\\n            (owner == spender || isApprovedForAll(owner, spender) || _getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Checks if `spender` can operate on `tokenId`, assuming the provided `owner` is the actual owner.\\n     * Reverts if `spender` does not have approval from the provided `owner` for the given token or for all its assets\\n     * the `spender` for the specific `tokenId`.\\n     *\\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\\n     * assumption.\\n     */\\n    function _checkAuthorized(address owner, address spender, uint256 tokenId) internal view virtual {\\n        if (!_isAuthorized(owner, spender, tokenId)) {\\n            if (owner == address(0)) {\\n                revert ERC721NonexistentToken(tokenId);\\n            } else {\\n                revert ERC721InsufficientApproval(spender, tokenId);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * NOTE: the value is limited to type(uint128).max. This protect against _balance overflow. It is unrealistic that\\n     * a uint256 would ever overflow from increments when these increments are bounded to uint128 values.\\n     *\\n     * WARNING: Increasing an account's balance using this function tends to be paired with an override of the\\n     * {_ownerOf} function to resolve the ownership of the corresponding tokens so that balances and ownership\\n     * remain consistent with one another.\\n     */\\n    function _increaseBalance(address account, uint128 value) internal virtual {\\n        unchecked {\\n            _balances[account] += value;\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from its current owner to `to`, or alternatively mints (or burns) if the current owner\\n     * (or `to`) is the zero address. Returns the owner of the `tokenId` before the update.\\n     *\\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that\\n     * `auth` is either the owner of the token, or approved to operate on the token (by the owner).\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: If overriding this function in a way that tracks balances, see also {_increaseBalance}.\\n     */\\n    function _update(address to, uint256 tokenId, address auth) internal virtual returns (address) {\\n        address from = _ownerOf(tokenId);\\n\\n        // Perform (optional) operator check\\n        if (auth != address(0)) {\\n            _checkAuthorized(from, auth, tokenId);\\n        }\\n\\n        // Execute the update\\n        if (from != address(0)) {\\n            // Clear approval. No need to re-authorize or emit the Approval event\\n            _approve(address(0), tokenId, address(0), false);\\n\\n            unchecked {\\n                _balances[from] -= 1;\\n            }\\n        }\\n\\n        if (to != address(0)) {\\n            unchecked {\\n                _balances[to] += 1;\\n            }\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        return from;\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        address previousOwner = _update(to, tokenId, address(0));\\n        if (previousOwner != address(0)) {\\n            revert ERC721InvalidSender(address(0));\\n        }\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId`, transfers it to `to` and checks for `to` acceptance.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _mint(to, tokenId);\\n        _checkOnERC721Received(address(0), to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal {\\n        address previousOwner = _update(address(0), tokenId, address(0));\\n        if (previousOwner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        address previousOwner = _update(to, tokenId, address(0));\\n        if (previousOwner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        } else if (previousOwner != from) {\\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\\n        }\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking that contract recipients\\n     * are aware of the ERC721 standard to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is like {safeTransferFrom} in the sense that it invokes\\n     * {IERC721Receiver-onERC721Received} on the receiver, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - `to` cannot be the zero address.\\n     * - `from` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId) internal {\\n        _safeTransfer(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeTransfer-address-address-uint256-}[`_safeTransfer`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        _checkOnERC721Received(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that `auth` is\\n     * either the owner of the token, or approved to operate on all tokens held by this owner.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address to, uint256 tokenId, address auth) internal {\\n        _approve(to, tokenId, auth, true);\\n    }\\n\\n    /**\\n     * @dev Variant of `_approve` with an optional flag to enable or disable the {Approval} event. The event is not\\n     * emitted in the context of transfers.\\n     */\\n    function _approve(address to, uint256 tokenId, address auth, bool emitEvent) internal virtual {\\n        // Avoid reading the owner unless necessary\\n        if (emitEvent || auth != address(0)) {\\n            address owner = _requireOwned(tokenId);\\n\\n            // We do not use _isAuthorized because single-token approvals should not be able to call approve\\n            if (auth != address(0) && owner != auth && !isApprovedForAll(owner, auth)) {\\n                revert ERC721InvalidApprover(auth);\\n            }\\n\\n            if (emitEvent) {\\n                emit Approval(owner, to, tokenId);\\n            }\\n        }\\n\\n        _tokenApprovals[tokenId] = to;\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Requirements:\\n     * - operator can't be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        if (operator == address(0)) {\\n            revert ERC721InvalidOperator(operator);\\n        }\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` doesn't have a current owner (it hasn't been minted, or it has been burned).\\n     * Returns the owner.\\n     *\\n     * Overrides to ownership logic should be done to {_ownerOf}.\\n     */\\n    function _requireOwned(uint256 tokenId) internal view returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        if (owner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        }\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev Private function to invoke {IERC721Receiver-onERC721Received} on a target address. This will revert if the\\n     * recipient doesn't accept the token transfer. The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     */\\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory data) private {\\n        if (to.code.length > 0) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                if (retval != IERC721Receiver.onERC721Received.selector) {\\n                    revert ERC721InvalidReceiver(to);\\n                }\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert ERC721InvalidReceiver(to);\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x13dd061770956c8489b80cfc89d9cdfc8ea2783d953691ea037a380731d52784\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5ef46daa3b58ef2702279d514780316efaa952915ee1aa3396f041ee2982b0b4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be\\n     * reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x7f7a26306c79a65fb8b3b6c757cd74660c532cd8a02e165488e30027dd34ca49\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/ERC721Burnable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ERC721} from \\\"../ERC721.sol\\\";\\nimport {Context} from \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @title ERC721 Burnable Token\\n * @dev ERC721 Token that can be burned (destroyed).\\n */\\nabstract contract ERC721Burnable is Context, ERC721 {\\n    /**\\n     * @dev Burns `tokenId`. See {ERC721-_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own `tokenId` or be an approved operator.\\n     */\\n    function burn(uint256 tokenId) public virtual {\\n        // Setting an \\\"auth\\\" arguments enables the `_isAuthorized` check which verifies that the token exists\\n        // (from != 0). Therefore, it is not needed to verify that the return value is not 0 here.\\n        _update(address(0), tokenId, _msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xc48434419baa510862ba4b4802bc0500ccddadd02ae2f195548af748c3206b20\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/ERC721Pausable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ERC721} from \\\"../ERC721.sol\\\";\\nimport {Pausable} from \\\"../../../utils/Pausable.sol\\\";\\n\\n/**\\n * @dev ERC721 token with pausable token transfers, minting and burning.\\n *\\n * Useful for scenarios such as preventing trades until the end of an evaluation\\n * period, or having an emergency switch for freezing all token transfers in the\\n * event of a large bug.\\n *\\n * IMPORTANT: This contract does not include public pause and unpause functions. In\\n * addition to inheriting this contract, you must define both functions, invoking the\\n * {Pausable-_pause} and {Pausable-_unpause} internal functions, with appropriate\\n * access control, e.g. using {AccessControl} or {Ownable}. Not doing so will\\n * make the contract pause mechanism of the contract unreachable, and thus unusable.\\n */\\nabstract contract ERC721Pausable is ERC721, Pausable {\\n    /**\\n     * @dev See {ERC721-_update}.\\n     *\\n     * Requirements:\\n     *\\n     * - the contract must not be paused.\\n     */\\n    function _update(\\n        address to,\\n        uint256 tokenId,\\n        address auth\\n    ) internal virtual override whenNotPaused returns (address) {\\n        return super._update(to, tokenId, auth);\\n    }\\n}\\n\",\"keccak256\":\"0xab7469fb4d5dbca13494abb44b720b63b62a48d594083312de4865ba50cd80b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x37d1aaaa5a2908a09e9dcf56a26ddf762ecf295afb5964695937344fc6802ce1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Base64.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides a set of functions to operate with Base64 strings.\\n */\\nlibrary Base64 {\\n    /**\\n     * @dev Base64 Encoding/Decoding Table\\n     */\\n    string internal constant _TABLE = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\n\\n    /**\\n     * @dev Converts a `bytes` to its Bytes64 `string` representation.\\n     */\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        /**\\n         * Inspired by Brecht Devos (Brechtpd) implementation - MIT licence\\n         * https://github.com/Brechtpd/base64/blob/e78d9fd951e7b0977ddca77d92dc85183770daf4/base64.sol\\n         */\\n        if (data.length == 0) return \\\"\\\";\\n\\n        // Loads the table into memory\\n        string memory table = _TABLE;\\n\\n        // Encoding takes 3 bytes chunks of binary data from `bytes` data parameter\\n        // and split into 4 numbers of 6 bits.\\n        // The final Base64 length should be `bytes` data length multiplied by 4/3 rounded up\\n        // - `data.length + 2`  -> Round up\\n        // - `/ 3`              -> Number of 3-bytes chunks\\n        // - `4 *`              -> 4 characters for each chunk\\n        string memory result = new string(4 * ((data.length + 2) / 3));\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Prepare the lookup table (skip the first \\\"length\\\" byte)\\n            let tablePtr := add(table, 1)\\n\\n            // Prepare result pointer, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // Run over the input, 3 bytes at a time\\n            for {\\n                let dataPtr := data\\n                let endPtr := add(data, mload(data))\\n            } lt(dataPtr, endPtr) {\\n\\n            } {\\n                // Advance 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // To write each character, shift the 3 bytes (18 bits) chunk\\n                // 4 times in blocks of 6 bits for each character (18, 12, 6, 0)\\n                // and apply logical AND with 0x3F which is the number of\\n                // the previous character in the ASCII table prior to the Base64 Table\\n                // The result is then added to the table to get the character to write,\\n                // and finally write it in the result pointer but with a left shift\\n                // of 256 (1 byte) - 8 (1 ASCII char) = 248 bits\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(input, 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n            }\\n\\n            // When data `bytes` is not exactly 3 bytes long\\n            // it is padded with `=` characters at the end\\n            switch mod(mload(data), 3)\\n            case 1 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n                mstore8(sub(resultPtr, 2), 0x3d)\\n            }\\n            case 2 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x6f7014d688c4386c26e8c02371ecb7f7740d2542f1ecadffd5a3084511e2a344\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Pausable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    bool private _paused;\\n\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    /**\\n     * @dev The operation failed because the contract is paused.\\n     */\\n    error EnforcedPause();\\n\\n    /**\\n     * @dev The operation failed because the contract is not paused.\\n     */\\n    error ExpectedPause();\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        if (paused()) {\\n            revert EnforcedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        if (!paused()) {\\n            revert ExpectedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xb2e5f50762c27fb4b123e3619c3c02bdcba5e515309382e5bfb6f7d6486510bd\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\"},\"contracts/SaiyaPetTest.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.19;\\n\\nimport '@openzeppelin/contracts/token/ERC721/ERC721.sol';\\nimport '@openzeppelin/contracts/token/ERC721/extensions/ERC721Pausable.sol';\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport '@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol';\\n\\nimport {Pet} from './game/Pet.sol';\\nimport {SvgHelper} from './game/SvgHelper.sol';\\n\\ncontract SaiyaPetTest is Pet, ERC721, ERC721Pausable, ERC721Burnable {\\n  uint256 private _nextTokenId;\\n\\n  constructor() ERC721('Pet', 'PT') {}\\n\\n  // \\u6316\\u51fa100\\u4e4b\\u540e\\uff0c 10 \\u5206\\u949f\\u4ea7\\u51fa\\u4e00\\u4e2a\\u5ba0\\u7269\\n  function mintPet(address to) public {\\n    uint256 tokenId = _nextTokenId++; //uint256(uint160(to) + _nextTokenId++);\\n    _safeMint(to, tokenId);\\n    initPet(tokenId);\\n  }\\n\\n  // The following functions are overrides required by Solidity.\\n\\n  function _update(\\n    address to,\\n    uint256 tokenId,\\n    address auth\\n  ) internal override(ERC721, ERC721Pausable) returns (address) {\\n    return super._update(to, tokenId, auth);\\n  }\\n\\n  function tokenURI(uint256 tokenId) public  override view returns (string memory) {\\n    if (ownerOf(tokenId) == address(0)) {\\n      return '';\\n    }\\n    return _bulidTokenURI(tokenId);\\n  }\\n\\n  function _bulidTokenURI(uint256 tokenId) internal view returns (string memory) {\\n    if (pets[tokenId].level == 0) return SvgHelper.generateL0();\\n    if (pets[tokenId].level == 1) return SvgHelper.generateL1();\\n    if (pets[tokenId].level == 2) return SvgHelper.generateL2();\\n    return SvgHelper.generateL0();\\n  }\\n\\n  function supportsInterface(bytes4 interfaceId) public view override(ERC721) returns (bool) {\\n    return super.supportsInterface(interfaceId);\\n  }\\n}\\n\",\"keccak256\":\"0x8fc38cb8bea6f9978a12b8546a1e923c38c585f81a98f5d637f9b4081f0d9d30\",\"license\":\"UNLICENSED\"},\"contracts/game/Pet.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.19;\\n\\ncontract Pet {\\n  struct Trait {\\n    uint256 level;\\n    uint256 exp;\\n    uint256 hp;\\n  }\\n  mapping(uint256 => Trait) internal pets;\\n\\n  // todo\\uff1a\\u6743\\u9650\\u63a7\\u5236\\n  function resetPet(uint256 tokenId) external {\\n    pets[tokenId] = Trait(0, 0, 100);\\n  }\\n\\n  function initPet(uint256 tokenId) internal {\\n    pets[tokenId] = Trait(0, 0, 100);\\n  }\\n\\n  function increaseExp(uint256 tokenId, uint256 exp) external {\\n    pets[tokenId].exp += exp;\\n  }\\n\\n  function increaseLevel(uint256 tokenId) external {\\n    pets[tokenId].level += 1;\\n  }\\n\\n  function setHp(uint256 tokenId, uint256 hp) external {\\n    pets[tokenId].hp = hp;\\n  }\\n}\\n\",\"keccak256\":\"0x88b1125213cbd5352b6cc9f9397ac64eeb7393ec6c421e9c942db3102ff80c88\",\"license\":\"UNLICENSED\"},\"contracts/game/SvgHelper.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.19;\\n\\nimport '@openzeppelin/contracts/utils/Base64.sol';\\nimport '@openzeppelin/contracts/utils/Strings.sol';\\n\\nlibrary SvgHelper {\\n  function generateL0() internal pure returns (string memory) {\\n    bytes memory image = abi.encodePacked(\\n      'data:image/svg+xml;base64,',\\n      Base64.encode(\\n        bytes(\\n          abi.encodePacked(\\n            '<svg width=\\\"100px\\\" height=\\\"100px\\\" viewBox=\\\"0 0 36.00 36.00\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\" aria-hidden=\\\"true\\\" role=\\\"img\\\" class=\\\"iconify iconify--twemoji\\\" preserveAspectRatio=\\\"xMidYMid meet\\\" fill=\\\"#404040\\\" stroke=\\\"#404040\\\" stroke-width=\\\"0.72\\\" transform=\\\"matrix(1, 0, 0, 1, 0, 0)\\\"><g id=\\\"SVGRepo_bgCarrier\\\" stroke-width=\\\"0\\\"></g><g id=\\\"SVGRepo_tracerCarrier\\\" stroke-linecap=\\\"round\\\" stroke-linejoin=\\\"round\\\" stroke=\\\"#CCCCCC\\\" stroke-width=\\\"0.21600000000000003\\\"></g><g id=\\\"SVGRepo_iconCarrier\\\"> <path fill=\\\"#ffffff\\\" d=\\\"M35.734 19.929C35.375 16.66 35 15 34 13c0 0 3-9 1-12.7c-.674-1.246-7.404 1.688-10 3.7c0 0-4-.998-7-.998S11 4 11 4C8.404 1.988 1.674-.946 1 .3C-1 4 2 13 2 13C1 15 .625 16.66.266 19.929C-.129 23.513.657 26.37 1 27c.39.716 2.367 3.025 5 5c4 3 10 4 12 4s8-1 12-4c2.633-1.975 4.61-4.284 5-5c.343-.63 1.129-3.487.734-7.071z\\\"> </path> <path fill=\\\"#353132\\\" d=\\\"M18 19.5c3 0 3 .5 3 1.5s-1.5 3-3 3s-3-2-3-3s-.001-1.5 3-1.5z\\\"> </path> <path fill=\\\"#383838\\\" d=\\\"M2 3c.447-1.342 5.64 1 6.64 2C8.64 5 4 8 3 11c0 0-2-5-1-8zm32 0c-.447-1.342-5.64 1-6.64 2c0 0 4.64 3 5.64 6c0 0 2-5 1-8z\\\"> </path> <path fill=\\\"#ffffff\\\" d=\\\"M4.934 5.603C4.934 4.189 11 7 10 8s-2 1.603-3 2.603s-2.066-4-2.066-5zm26.132 0C31.066 4.189 25 7 26 8s2 1.603 3 2.603s2.066-4 2.066-5z\\\"> </path> <path fill=\\\"#383838\\\" d=\\\"M.701 25a.5.5 0 0 1-.31-.892c.162-.127 4.02-3.12 10.648-2.605c.275.02.481.261.46.536c-.021.275-.257.501-.537.46c-6.233-.474-9.915 2.366-9.951 2.395a.51.51 0 0 1-.31.106zm8.868-4.663a.512.512 0 0 1-.149-.022c-4.79-1.497-8.737-.347-8.777-.336a.499.499 0 1 1-.288-.957c.173-.052 4.286-1.247 9.362.338a.5.5 0 0 1-.148.977zM35.299 25a.5.5 0 0 0 .31-.892c-.162-.127-4.02-3.12-10.648-2.605a.499.499 0 0 0-.46.536c.021.275.257.501.537.46c6.233-.474 9.915 2.366 9.951 2.395a.51.51 0 0 0 .31.106zm-8.868-4.663c.049 0 .1-.007.149-.022c4.79-1.497 8.737-.347 8.777-.336a.499.499 0 1 0 .288-.957c-.173-.052-4.286-1.247-9.362.338a.5.5 0 0 0 .148.977z\\\"> </path> <path fill=\\\"#474747\\\" d=\\\"M25.327 25.622a.5.5 0 0 0-.551-.069l-4 2c-1.871.935-6.727.947-6.776.947a.5.5 0 0 0-.25.933v.001h.001v.001c.071.04.153.063.24.065h7.008c2.658 0 4.089-2.186 4.475-3.342a.5.5 0 0 0-.147-.536z\\\"> </path> <g fill=\\\"#474747\\\"> <ellipse cx=\\\"12\\\" cy=\\\"14.5\\\" rx=\\\"2\\\" ry=\\\"3.5\\\"> </ellipse> <ellipse cx=\\\"24\\\" cy=\\\"14.5\\\" rx=\\\"2\\\" ry=\\\"3.5\\\"> </ellipse> ',\\n            '<path d=\\\"M21 12a.999.999 0 0 1-.707-1.707C24.537 6.049 28.819 6 29 6a1 1 0 0 1 .005 2c-.065.001-3.687.096-7.298 3.707A.997.997 0 0 1 21 12zm-6 0a.997.997 0 0 1-.707-.293C10.667 8.082 7.031 8 6.995 8a1.002 1.002 0 0 1-.992-1.005A.997.997 0 0 1 7 6c.18 0 4.463.049 8.707 4.293A.999.999 0 0 1 15 12z\\\"> </path>',\\n            '</g> </g></svg>'\\n          )\\n        )\\n      )\\n    );\\n    return\\n      string(\\n        abi.encodePacked(\\n          'data:application/json;base64,',\\n          Base64.encode(\\n            bytes(abi.encodePacked('{\\\"name\\\":\\\"SaiyaPet\\\", \\\"image\\\":\\\"', image, unicode'\\\", \\\"description\\\": \\\"\\\"}'))\\n          )\\n        )\\n      );\\n  }\\n\\n  function generateL1() internal pure returns (string memory) {\\n    bytes memory image = abi.encodePacked(\\n      'data:image/svg+xml;base64,',\\n      Base64.encode(\\n        bytes(\\n          abi.encodePacked(\\n            '<svg width=\\\"100px\\\" height=\\\"100px\\\" viewBox=\\\"0 0 36.00 36.00\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\" aria-hidden=\\\"true\\\" role=\\\"img\\\" class=\\\"iconify iconify--twemoji\\\" preserveAspectRatio=\\\"xMidYMid meet\\\" fill=\\\"#404040\\\" stroke=\\\"#404040\\\" stroke-width=\\\"0.72\\\" transform=\\\"matrix(1, 0, 0, 1, 0, 0)\\\">',\\n            '<g id=\\\"SVGRepo_bgCarrier\\\" stroke-width=\\\"0\\\"></g><g id=\\\"SVGRepo_tracerCarrier\\\" stroke-linecap=\\\"round\\\" stroke-linejoin=\\\"round\\\" stroke=\\\"#CCCCCC\\\" stroke-width=\\\"0.21600000000000003\\\"></g><g id=\\\"SVGRepo_iconCarrier\\\"> <path fill=\\\"#ffffff\\\" d=\\\"M35.734 19.929C35.375 16.66 35 15 34 13c0 0 3-9 1-12.7c-.674-1.246-7.404 1.688-10 3.7c0 0-4-.998-7-.998S11 4 11 4C8.404 1.988 1.674-.946 1 .3C-1 4 2 13 2 13C1 15 .625 16.66.266 19.929C-.129 23.513.657 26.37 1 27c.39.716 2.367 3.025 5 5c4 3 10 4 12 4s8-1 12-4c2.633-1.975 4.61-4.284 5-5c.343-.63 1.129-3.487.734-7.071z\\\"> </path> <path fill=\\\"#efe362\\\" d=\\\"M18 19.5c3 0 3 .5 3 1.5s-1.5 3-3 3s-3-2-3-3s-.001-1.5 3-1.5z\\\"> </path> <path fill=\\\"#efe362\\\" d=\\\"M2 3c.447-1.342 5.64 1 6.64 2C8.64 5 4 8 3 11c0 0-2-5-1-8zm32 0c-.447-1.342-5.64 1-6.64 2c0 0 4.64 3 5.64 6c0 0 2-5 1-8z\\\"> </path> <path fill=\\\"#ffffff\\\" d=\\\"M4.934 5.603C4.934 4.189 11 7 10 8s-2 1.603-3 2.603s-2.066-4-2.066-5zm26.132 0C31.066 4.189 25 7 26 8s2 1.603 3 2.603s2.066-4 2.066-5z\\\"> </path> <path fill=\\\"#efe362\\\" d=\\\"M.701 25a.5.5 0 0 1-.31-.892c.162-.127 4.02-3.12 10.648-2.605c.275.02.481.261.46.536c-.021.275-.257.501-.537.46c-6.233-.474-9.915 2.366-9.951 2.395a.51.51 0 0 1-.31.106zm8.868-4.663a.512.512 0 0 1-.149-.022c-4.79-1.497-8.737-.347-8.777-.336a.499.499 0 1 1-.288-.957c.173-.052 4.286-1.247 9.362.338a.5.5 0 0 1-.148.977zM35.299 25a.5.5 0 0 0 .31-.892c-.162-.127-4.02-3.12-10.648-2.605a.499.499 0 0 0-.46.536c.021.275.257.501.537.46c6.233-.474 9.915 2.366 9.951 2.395a.51.51 0 0 0 .31.106zm-8.868-4.663c.049 0 .1-.007.149-.022c4.79-1.497 8.737-.347 8.777-.336a.499.499 0 1 0 .288-.957c-.173-.052-4.286-1.247-9.362.338a.5.5 0 0 0 .148.977z\\\"> </path> <path fill=\\\"#efe362\\\" d=\\\"M25.327 25.622a.5.5 0 0 0-.551-.069l-4 2c-1.871.935-6.727.947-6.776.947a.5.5 0 0 0-.25.933v.001h.001v.001c.071.04.153.063.24.065h7.008c2.658 0 4.089-2.186 4.475-3.342a.5.5 0 0 0-.147-.536z\\\"> </path> <g fill=\\\"#efe362\\\"> <ellipse cx=\\\"12\\\" cy=\\\"14.5\\\" rx=\\\"2\\\" ry=\\\"3.5\\\"> </ellipse> <ellipse cx=\\\"24\\\" cy=\\\"14.5\\\" rx=\\\"2\\\" ry=\\\"3.5\\\"> </ellipse> <path d=\\\"M21 12a.999.999 0 0 1-.707-1.707C24.537 6.049 28.819 6 29 6a1 1 0 0 1 .005 2c-.065.001-3.687.096-7.298 3.707A.997.997 0 0 1 21 12zm-6 0a.997.997 0 0 1-.707-.293C10.667 8.082 7.031 8 6.995 8a1.002 1.002 0 0 1-.992-1.005A.997.997 0 0 1 7 6c.18 0 4.463.049 8.707 4.293A.999.999 0 0 1 15 12z\\\"> </path> </g> </g></svg>',\\n            '<path d=\\\"M21 12a.999.999 0 0 1-.707-1.707C24.537 6.049 28.819 6 29 6a1 1 0 0 1 .005 2c-.065.001-3.687.096-7.298 3.707A.997.997 0 0 1 21 12zm-6 0a.997.997 0 0 1-.707-.293C10.667 8.082 7.031 8 6.995 8a1.002 1.002 0 0 1-.992-1.005A.997.997 0 0 1 7 6c.18 0 4.463.049 8.707 4.293A.999.999 0 0 1 15 12z\\\"></path>',\\n            '</g> </g></svg>'\\n          )\\n        )\\n      )\\n    );\\n    return\\n      string(\\n        abi.encodePacked(\\n          'data:application/json;base64,',\\n          Base64.encode(\\n            bytes(abi.encodePacked('{\\\"name\\\":\\\"SaiyaPet\\\", \\\"image\\\":\\\"', image, unicode'\\\", \\\"description\\\": \\\"\\\"}'))\\n          )\\n        )\\n      );\\n  }\\n\\n  function generateL2() internal pure returns (string memory) {\\n    bytes memory image = abi.encodePacked(\\n      'data:image/svg+xml;base64,',\\n      Base64.encode(\\n        bytes(\\n          abi.encodePacked(\\n            '<svg width=\\\"100px\\\" height=\\\"100px\\\" viewBox=\\\"0 0 36.00 36.00\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\" aria-hidden=\\\"true\\\" role=\\\"img\\\" class=\\\"iconify iconify--twemoji\\\" preserveAspectRatio=\\\"xMidYMid meet\\\" fill=\\\"#404040\\\" stroke=\\\"#404040\\\" stroke-width=\\\"0.72\\\" transform=\\\"matrix(1, 0, 0, 1, 0, 0)\\\">',\\n            '<g id=\\\"SVGRepo_bgCarrier\\\" stroke-width=\\\"0\\\"></g><g id=\\\"SVGRepo_tracerCarrier\\\" stroke-linecap=\\\"round\\\" stroke-linejoin=\\\"round\\\" stroke=\\\"#CCCCCC\\\" stroke-width=\\\"0.21600000000000003\\\"></g><g id=\\\"SVGRepo_iconCarrier\\\"> <path fill=\\\"#ffffff\\\" d=\\\"M35.734 19.929C35.375 16.66 35 15 34 13c0 0 3-9 1-12.7c-.674-1.246-7.404 1.688-10 3.7c0 0-4-.998-7-.998S11 4 11 4C8.404 1.988 1.674-.946 1 .3C-1 4 2 13 2 13C1 15 .625 16.66.266 19.929C-.129 23.513.657 26.37 1 27c.39.716 2.367 3.025 5 5c4 3 10 4 12 4s8-1 12-4c2.633-1.975 4.61-4.284 5-5c.343-.63 1.129-3.487.734-7.071z\\\"> </path> <path fill=\\\"#ff7070\\\" d=\\\"M18 19.5c3 0 3 .5 3 1.5s-1.5 3-3 3s-3-2-3-3s-.001-1.5 3-1.5z\\\"> </path> <path fill=\\\"#ff7070\\\" d=\\\"M2 3c.447-1.342 5.64 1 6.64 2C8.64 5 4 8 3 11c0 0-2-5-1-8zm32 0c-.447-1.342-5.64 1-6.64 2c0 0 4.64 3 5.64 6c0 0 2-5 1-8z\\\"> </path> <path fill=\\\"#ffffff\\\" d=\\\"M4.934 5.603C4.934 4.189 11 7 10 8s-2 1.603-3 2.603s-2.066-4-2.066-5zm26.132 0C31.066 4.189 25 7 26 8s2 1.603 3 2.603s2.066-4 2.066-5z\\\"> </path> <path fill=\\\"#ff7070\\\" d=\\\"M.701 25a.5.5 0 0 1-.31-.892c.162-.127 4.02-3.12 10.648-2.605c.275.02.481.261.46.536c-.021.275-.257.501-.537.46c-6.233-.474-9.915 2.366-9.951 2.395a.51.51 0 0 1-.31.106zm8.868-4.663a.512.512 0 0 1-.149-.022c-4.79-1.497-8.737-.347-8.777-.336a.499.499 0 1 1-.288-.957c.173-.052 4.286-1.247 9.362.338a.5.5 0 0 1-.148.977zM35.299 25a.5.5 0 0 0 .31-.892c-.162-.127-4.02-3.12-10.648-2.605a.499.499 0 0 0-.46.536c.021.275.257.501.537.46c6.233-.474 9.915 2.366 9.951 2.395a.51.51 0 0 0 .31.106zm-8.868-4.663c.049 0 .1-.007.149-.022c4.79-1.497 8.737-.347 8.777-.336a.499.499 0 1 0 .288-.957c-.173-.052-4.286-1.247-9.362.338a.5.5 0 0 0 .148.977z\\\"> </path> <path fill=\\\"#ff7070\\\" d=\\\"M25.327 25.622a.5.5 0 0 0-.551-.069l-4 2c-1.871.935-6.727.947-6.776.947a.5.5 0 0 0-.25.933v.001h.001v.001c.071.04.153.063.24.065h7.008c2.658 0 4.089-2.186 4.475-3.342a.5.5 0 0 0-.147-.536z\\\"> </path> <g fill=\\\"#ff7070\\\"> <ellipse cx=\\\"12\\\" cy=\\\"14.5\\\" rx=\\\"2\\\" ry=\\\"3.5\\\"> </ellipse> <ellipse cx=\\\"24\\\" cy=\\\"14.5\\\" rx=\\\"2\\\" ry=\\\"3.5\\\"> </ellipse> <path d=\\\"M21 12a.999.999 0 0 1-.707-1.707C24.537 6.049 28.819 6 29 6a1 1 0 0 1 .005 2c-.065.001-3.687.096-7.298 3.707A.997.997 0 0 1 21 12zm-6 0a.997.997 0 0 1-.707-.293C10.667 8.082 7.031 8 6.995 8a1.002 1.002 0 0 1-.992-1.005A.997.997 0 0 1 7 6c.18 0 4.463.049 8.707 4.293A.999.999 0 0 1 15 12z\\\"> ',\\n            '</path> </g> </g></svg>'\\n          )\\n        )\\n      )\\n    );\\n    return\\n      string(\\n        abi.encodePacked(\\n          'data:application/json;base64,',\\n          Base64.encode(\\n            bytes(abi.encodePacked('{\\\"name\\\":\\\"SaiyaPet\\\", \\\"image\\\":\\\"', image, unicode'\\\", \\\"description\\\": \\\"\\\"}'))\\n          )\\n        )\\n      );\\n  }\\n}\\n\",\"keccak256\":\"0x05298cc86281acc1bc9b18ce0750b8e4f70ef3844636984acbdd0dd5581cdaef\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040518060400160405280600381526020017f50657400000000000000000000000000000000000000000000000000000000008152506040518060400160405280600281526020017f505400000000000000000000000000000000000000000000000000000000000081525081600190816200008f91906200033f565b508060029081620000a191906200033f565b5050506000600760006101000a81548160ff02191690831515021790555062000426565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200014757607f821691505b6020821081036200015d576200015c620000ff565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620001c77fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8262000188565b620001d3868362000188565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b6000620002206200021a6200021484620001eb565b620001f5565b620001eb565b9050919050565b6000819050919050565b6200023c83620001ff565b620002546200024b8262000227565b84845462000195565b825550505050565b600090565b6200026b6200025c565b6200027881848462000231565b505050565b5b81811015620002a0576200029460008262000261565b6001810190506200027e565b5050565b601f821115620002ef57620002b98162000163565b620002c48462000178565b81016020851015620002d4578190505b620002ec620002e38562000178565b8301826200027d565b50505b505050565b600082821c905092915050565b60006200031460001984600802620002f4565b1980831691505092915050565b60006200032f838362000301565b9150826002028217905092915050565b6200034a82620000c5565b67ffffffffffffffff811115620003665762000365620000d0565b5b6200037282546200012e565b6200037f828285620002a4565b600060209050601f831160018114620003b75760008415620003a2578287015190505b620003ae858262000321565b8655506200041e565b601f198416620003c78662000163565b60005b82811015620003f157848901518255600182019150602085019450602081019050620003ca565b868310156200041157848901516200040d601f89168262000301565b8355505b6001600288020188555050505b505050505050565b614d8f80620004366000396000f3fe608060405234801561001057600080fd5b506004361061012c5760003560e01c80636352211e116100ad578063b88d4fde11610071578063b88d4fde1461032b578063c429a77314610347578063c87b56dd14610363578063e985e9c514610393578063fa592846146103c35761012c565b80636352211e1461027557806370a08231146102a55780638fa17f37146102d557806395d89b41146102f1578063a22cb4651461030f5761012c565b806323b872dd116100f457806323b872dd146101e7578063412071051461020357806342842e0e1461021f57806342966c681461023b5780635c975abb146102575761012c565b806301ffc9a71461013157806306fdde0314610161578063081812fc1461017f578063095ea7b3146101af578063117c9091146101cb575b600080fd5b61014b60048036038101906101469190611aaf565b6103df565b6040516101589190611af7565b60405180910390f35b6101696103f1565b6040516101769190611ba2565b60405180910390f35b61019960048036038101906101949190611bfa565b610483565b6040516101a69190611c68565b60405180910390f35b6101c960048036038101906101c49190611caf565b61049f565b005b6101e560048036038101906101e09190611bfa565b6104b5565b005b61020160048036038101906101fc9190611cef565b610509565b005b61021d60048036038101906102189190611bfa565b61060b565b005b61023960048036038101906102349190611cef565b61063b565b005b61025560048036038101906102509190611bfa565b61065b565b005b61025f610672565b60405161026c9190611af7565b60405180910390f35b61028f600480360381019061028a9190611bfa565b610689565b60405161029c9190611c68565b60405180910390f35b6102bf60048036038101906102ba9190611d42565b61069b565b6040516102cc9190611d7e565b60405180910390f35b6102ef60048036038101906102ea9190611d99565b610755565b005b6102f9610773565b6040516103069190611ba2565b60405180910390f35b61032960048036038101906103249190611e05565b610805565b005b61034560048036038101906103409190611f7a565b61081b565b005b610361600480360381019061035c9190611d99565b610838565b005b61037d60048036038101906103789190611bfa565b610868565b60405161038a9190611ba2565b60405180910390f35b6103ad60048036038101906103a89190611ffd565b6108ce565b6040516103ba9190611af7565b60405180910390f35b6103dd60048036038101906103d89190611d42565b610962565b005b60006103ea82610994565b9050919050565b6060600180546104009061206c565b80601f016020809104026020016040519081016040528092919081815260200182805461042c9061206c565b80156104795780601f1061044e57610100808354040283529160200191610479565b820191906000526020600020905b81548152906001019060200180831161045c57829003601f168201915b5050505050905090565b600061048e82610a76565b5061049882610afe565b9050919050565b6104b182826104ac610b3b565b610b43565b5050565b60405180606001604052806000815260200160008152602001606481525060008083815260200190815260200160002060008201518160000155602082015181600101556040820151816002015590505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361057b5760006040517f64a0ae920000000000000000000000000000000000000000000000000000000081526004016105729190611c68565b60405180910390fd5b600061058f838361058a610b3b565b610b55565b90508373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610605578382826040517f64283d7b0000000000000000000000000000000000000000000000000000000081526004016105fc9392919061209d565b60405180910390fd5b50505050565b600160008083815260200190815260200160002060000160008282546106319190612103565b9250508190555050565b6106568383836040518060200160405280600081525061081b565b505050565b61066e600082610669610b3b565b610b55565b5050565b6000600760009054906101000a900460ff16905090565b600061069482610a76565b9050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361070e5760006040517f89c62b640000000000000000000000000000000000000000000000000000000081526004016107059190611c68565b60405180910390fd5b600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b80600080848152602001908152602001600020600201819055505050565b6060600280546107829061206c565b80601f01602080910402602001604051908101604052809291908181526020018280546107ae9061206c565b80156107fb5780601f106107d0576101008083540402835291602001916107fb565b820191906000526020600020905b8154815290600101906020018083116107de57829003601f168201915b5050505050905090565b610817610810610b3b565b8383610b6b565b5050565b610826848484610509565b61083284848484610cda565b50505050565b80600080848152602001908152602001600020600101600082825461085d9190612103565b925050819055505050565b6060600073ffffffffffffffffffffffffffffffffffffffff1661088b83610689565b73ffffffffffffffffffffffffffffffffffffffff16036108bd576040518060200160405280600081525090506108c9565b6108c682610e91565b90505b919050565b6000600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60006008600081548092919061097790612137565b9190505590506109878282610f27565b61099081610f45565b5050565b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480610a5f57507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80610a6f5750610a6e82610f99565b5b9050919050565b600080610a8283611003565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610af557826040517f7e273289000000000000000000000000000000000000000000000000000000008152600401610aec9190611d7e565b60405180910390fd5b80915050919050565b60006005600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600033905090565b610b508383836001611040565b505050565b6000610b62848484611205565b90509392505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610bdc57816040517f5b08ba18000000000000000000000000000000000000000000000000000000008152600401610bd39190611c68565b60405180910390fd5b80600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051610ccd9190611af7565b60405180910390a3505050565b60008373ffffffffffffffffffffffffffffffffffffffff163b1115610e8b578273ffffffffffffffffffffffffffffffffffffffff1663150b7a02610d1e610b3b565b8685856040518563ffffffff1660e01b8152600401610d4094939291906121d4565b6020604051808303816000875af1925050508015610d7c57506040513d601f19601f82011682018060405250810190610d799190612235565b60015b610e00573d8060008114610dac576040519150601f19603f3d011682016040523d82523d6000602084013e610db1565b606091505b506000815103610df857836040517f64a0ae92000000000000000000000000000000000000000000000000000000008152600401610def9190611c68565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614610e8957836040517f64a0ae92000000000000000000000000000000000000000000000000000000008152600401610e809190611c68565b60405180910390fd5b505b50505050565b606060008060008481526020019081526020016000206000015403610ebf57610eb8611223565b9050610f22565b60016000808481526020019081526020016000206000015403610eeb57610ee46112bb565b9050610f22565b60026000808481526020019081526020016000206000015403610f1757610f10611353565b9050610f22565b610f1f611223565b90505b919050565b610f418282604051806020016040528060008152506113eb565b5050565b60405180606001604052806000815260200160008152602001606481525060008083815260200190815260200160002060008201518160000155602082015181600101556040820151816002015590505050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b60006003600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b80806110795750600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614155b156111ad57600061108984610a76565b9050600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141580156110f457508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614155b8015611107575061110581846108ce565b155b1561114957826040517fa9fbf51f0000000000000000000000000000000000000000000000000000000081526004016111409190611c68565b60405180910390fd5b81156111ab57838573ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45b505b836005600085815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505050565b600061120f611407565b61121a848484611448565b90509392505050565b6060600061124d60405160200161123990612f9e565b604051602081830303815290604052611662565b60405160200161125d9190613046565b604051602081830303815290604052905061129681604051602001611282919061313c565b604051602081830303815290604052611662565b6040516020016112a691906131b5565b60405160208183030381529060405291505090565b606060006112e56040516020016112d190614089565b604051602081830303815290604052611662565b6040516020016112f59190613046565b604051602081830303815290604052905061132e8160405160200161131a919061313c565b604051602081830303815290604052611662565b60405160200161133e91906131b5565b60405160208183030381529060405291505090565b6060600061137d60405160200161136990614c23565b604051602081830303815290604052611662565b60405160200161138d9190613046565b60405160208183030381529060405290506113c6816040516020016113b2919061313c565b604051602081830303815290604052611662565b6040516020016113d691906131b5565b60405160208183030381529060405291505090565b6113f583836117c5565b6114026000848484610cda565b505050565b61140f610672565b15611446576040517fd93c066500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b60008061145484611003565b9050600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614611496576114958184866118be565b5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614611527576114d8600085600080611040565b6001600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055505b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16146115aa576001600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055505b846003600086815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550838573ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4809150509392505050565b60606000825103611684576040518060200160405280600081525090506117c0565b6000604051806060016040528060408152602001614d1a60409139905060006003600285516116b39190612103565b6116bd9190614c7d565b60046116c99190614cae565b67ffffffffffffffff8111156116e2576116e1611e4f565b5b6040519080825280601f01601f1916602001820160405280156117145781602001600182028036833780820191505090505b509050600182016020820185865187015b80821015611780576003820191508151603f8160121c168501518453600184019350603f81600c1c168501518453600184019350603f8160061c168501518453600184019350603f8116850151845360018401935050611725565b505060038651066001811461179c57600281146117af576117b7565b603d6001830353603d60028303536117b7565b603d60018303535b50505080925050505b919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036118375760006040517f64a0ae9200000000000000000000000000000000000000000000000000000000815260040161182e9190611c68565b60405180910390fd5b600061184583836000610b55565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146118b95760006040517f73c6ac6e0000000000000000000000000000000000000000000000000000000081526004016118b09190611c68565b60405180910390fd5b505050565b6118c9838383611982565b61197d57600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361193e57806040517f7e2732890000000000000000000000000000000000000000000000000000000081526004016119359190611d7e565b60405180910390fd5b81816040517f177e802f000000000000000000000000000000000000000000000000000000008152600401611974929190614cf0565b60405180910390fd5b505050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614158015611a3a57508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614806119fb57506119fa84846108ce565b5b80611a3957508273ffffffffffffffffffffffffffffffffffffffff16611a2183610afe565b73ffffffffffffffffffffffffffffffffffffffff16145b5b90509392505050565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b611a8c81611a57565b8114611a9757600080fd5b50565b600081359050611aa981611a83565b92915050565b600060208284031215611ac557611ac4611a4d565b5b6000611ad384828501611a9a565b91505092915050565b60008115159050919050565b611af181611adc565b82525050565b6000602082019050611b0c6000830184611ae8565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611b4c578082015181840152602081019050611b31565b60008484015250505050565b6000601f19601f8301169050919050565b6000611b7482611b12565b611b7e8185611b1d565b9350611b8e818560208601611b2e565b611b9781611b58565b840191505092915050565b60006020820190508181036000830152611bbc8184611b69565b905092915050565b6000819050919050565b611bd781611bc4565b8114611be257600080fd5b50565b600081359050611bf481611bce565b92915050565b600060208284031215611c1057611c0f611a4d565b5b6000611c1e84828501611be5565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611c5282611c27565b9050919050565b611c6281611c47565b82525050565b6000602082019050611c7d6000830184611c59565b92915050565b611c8c81611c47565b8114611c9757600080fd5b50565b600081359050611ca981611c83565b92915050565b60008060408385031215611cc657611cc5611a4d565b5b6000611cd485828601611c9a565b9250506020611ce585828601611be5565b9150509250929050565b600080600060608486031215611d0857611d07611a4d565b5b6000611d1686828701611c9a565b9350506020611d2786828701611c9a565b9250506040611d3886828701611be5565b9150509250925092565b600060208284031215611d5857611d57611a4d565b5b6000611d6684828501611c9a565b91505092915050565b611d7881611bc4565b82525050565b6000602082019050611d936000830184611d6f565b92915050565b60008060408385031215611db057611daf611a4d565b5b6000611dbe85828601611be5565b9250506020611dcf85828601611be5565b9150509250929050565b611de281611adc565b8114611ded57600080fd5b50565b600081359050611dff81611dd9565b92915050565b60008060408385031215611e1c57611e1b611a4d565b5b6000611e2a85828601611c9a565b9250506020611e3b85828601611df0565b9150509250929050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611e8782611b58565b810181811067ffffffffffffffff82111715611ea657611ea5611e4f565b5b80604052505050565b6000611eb9611a43565b9050611ec58282611e7e565b919050565b600067ffffffffffffffff821115611ee557611ee4611e4f565b5b611eee82611b58565b9050602081019050919050565b82818337600083830152505050565b6000611f1d611f1884611eca565b611eaf565b905082815260208101848484011115611f3957611f38611e4a565b5b611f44848285611efb565b509392505050565b600082601f830112611f6157611f60611e45565b5b8135611f71848260208601611f0a565b91505092915050565b60008060008060808587031215611f9457611f93611a4d565b5b6000611fa287828801611c9a565b9450506020611fb387828801611c9a565b9350506040611fc487828801611be5565b925050606085013567ffffffffffffffff811115611fe557611fe4611a52565b5b611ff187828801611f4c565b91505092959194509250565b6000806040838503121561201457612013611a4d565b5b600061202285828601611c9a565b925050602061203385828601611c9a565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061208457607f821691505b6020821081036120975761209661203d565b5b50919050565b60006060820190506120b26000830186611c59565b6120bf6020830185611d6f565b6120cc6040830184611c59565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061210e82611bc4565b915061211983611bc4565b9250828201905080821115612131576121306120d4565b5b92915050565b600061214282611bc4565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203612174576121736120d4565b5b600182019050919050565b600081519050919050565b600082825260208201905092915050565b60006121a68261217f565b6121b0818561218a565b93506121c0818560208601611b2e565b6121c981611b58565b840191505092915050565b60006080820190506121e96000830187611c59565b6121f66020830186611c59565b6122036040830185611d6f565b8181036060830152612215818461219b565b905095945050505050565b60008151905061222f81611a83565b92915050565b60006020828403121561224b5761224a611a4d565b5b600061225984828501612220565b91505092915050565b600081905092915050565b7f3c7376672077696474683d22313030707822206865696768743d22313030707860008201527f222076696577426f783d223020302033362e30302033362e30302220786d6c6e60208201527f733d22687474703a2f2f7777772e77332e6f72672f323030302f73766722207860408201527f6d6c6e733a786c696e6b3d22687474703a2f2f7777772e77332e6f72672f313960608201527f39392f786c696e6b2220617269612d68696464656e3d22747275652220726f6c60808201527f653d22696d672220636c6173733d2269636f6e6966792069636f6e6966792d2d60a08201527f7477656d6f6a6922207072657365727665417370656374526174696f3d22784d60c08201527f6964594d6964206d656574222066696c6c3d222334303430343022207374726f60e08201527f6b653d222334303430343022207374726f6b652d77696474683d22302e3732226101008201527f207472616e73666f726d3d226d617472697828312c20302c20302c20312c20306101208201527f2c203029223e3c672069643d225356475265706f5f62674361727269657222206101408201527f7374726f6b652d77696474683d2230223e3c2f673e3c672069643d22535647526101608201527f65706f5f7472616365724361727269657222207374726f6b652d6c696e6563616101808201527f703d22726f756e6422207374726f6b652d6c696e656a6f696e3d22726f756e646101a08201527f22207374726f6b653d222343434343434322207374726f6b652d77696474683d6101c08201527f22302e3231363030303030303030303030303033223e3c2f673e3c672069643d6101e08201527f225356475265706f5f69636f6e43617272696572223e203c706174682066696c6102008201527f6c3d22236666666666662220643d224d33352e3733342031392e3932394333356102208201527f2e3337352031362e36362033352031352033342031336330203020332d3920316102408201527f2d31322e37632d2e3637342d312e3234362d372e34303420312e3638382d31306102608201527f20332e37633020302d342d2e3939382d372d2e393938533131203420313120346102808201527f43382e34303420312e39383820312e3637342d2e3934362031202e33432d31206102a08201527f34203220313320322031334331203135202e3632352031362e36362e323636206102c08201527f31392e393239432d2e3132392032332e3531332e3635372032362e33372031206102e08201527f3237632e33392e37313620322e33363720332e303235203520356334203320316103008201527f302034203132203473382d312031322d3463322e3633332d312e39373520342e6103208201527f36312d342e32383420352d35632e3334332d2e363320312e3132392d332e34386103408201527f372e3733342d372e3037317a223e203c2f706174683e203c706174682066696c6103608201527f6c3d22233335333133322220643d224d31382031392e35633320302033202e356103808201527f203320312e35732d312e3520332d332033732d332d322d332d33732d2e3030316103a08201527f2d312e3520332d312e357a223e203c2f706174683e203c706174682066696c6c6103c08201527f3d22233338333833382220643d224d322033632e3434372d312e33343220352e6103e08201527f3634203120362e3634203243382e36342035203420382033203131633020302d6104008201527f322d352d312d387a6d33322030632d2e3434372d312e3334322d352e363420316104208201527f2d362e363420326330203020342e3634203320352e363420366330203020322d6104408201527f3520312d387a223e203c2f706174683e203c706174682066696c6c3d222366666104608201527f666666662220643d224d342e39333420352e36303343342e39333420342e31386104808201527f3920313120372031302038732d3220312e3630332d3320322e363033732d322e6104a08201527f3036362d342d322e3036362d357a6d32362e31333220304333312e30363620346104c08201527f2e31383920323520372032362038733220312e363033203320322e36303373326104e08201527f2e3036362d3420322e3036362d357a223e203c2f706174683e203c70617468206105008201527f66696c6c3d22233338333833382220643d224d2e373031203235612e352e35206105208201527f30203020312d2e33312d2e383932632e3136322d2e31323720342e30322d332e6105408201527f31322031302e3634382d322e363035632e3237352e30322e3438312e3236312e6105608201527f34362e353336632d2e3032312e3237352d2e3235372e3530312d2e3533372e346105808201527f36632d362e3233332d2e3437342d392e39313520322e3336362d392e393531206105a08201527f322e333935612e35312e35312030203020312d2e33312e3130367a6d382e38366105c08201527f382d342e363633612e3531322e3531322030203020312d2e3134392d2e3032326105e08201527f632d342e37392d312e3439372d382e3733372d2e3334372d382e3737372d2e336106008201527f3336612e3439392e3439392030203120312d2e3238382d2e393537632e3137336106208201527f2d2e30353220342e3238362d312e32343720392e3336322e333338612e352e356106408201527f2030203020312d2e3134382e3937377a4d33352e323939203235612e352e35206106608201527f3020302030202e33312d2e383932632d2e3136322d2e3132372d342e30322d336106808201527f2e31322d31302e3634382d322e363035612e3439392e3439392030203020302d6106a08201527f2e34362e353336632e3032312e3237352e3235372e3530312e3533372e3436636106c08201527f362e3233332d2e34373420392e39313520322e33363620392e39353120322e336106e08201527f3935612e35312e3531203020302030202e33312e3130367a6d2d382e3836382d6107008201527f342e363633632e3034392030202e312d2e3030372e3134392d2e30323263342e6107208201527f37392d312e34393720382e3733372d2e33343720382e3737372d2e333336612e6107408201527f3439392e343939203020312030202e3238382d2e393537632d2e3137332d2e306107608201527f35322d342e3238362d312e3234372d392e3336322e333338612e352e352030206107808201527f302030202e3134382e3937377a223e203c2f706174683e203c706174682066696107a08201527f6c6c3d22233437343734372220643d224d32352e3332372032352e363232612e6107c08201527f352e352030203020302d2e3535312d2e3036396c2d342032632d312e3837312e6107e08201527f3933352d362e3732372e3934372d362e3737362e393437612e352e35203020306108008201527f20302d2e32352e393333762e303031682e303031762e303031632e3037312e306108208201527f342e3135332e3036332e32342e30363568372e30303863322e363538203020346108408201527f2e3038392d322e31383620342e3437352d332e333432612e352e3520302030206108608201527f302d2e3134372d2e3533367a223e203c2f706174683e203c672066696c6c3d226108808201527f23343734373437223e203c656c6c697073652063783d223132222063793d22316108a08201527f342e35222072783d2232222072793d22332e35223e203c2f656c6c697073653e6108c08201527f203c656c6c697073652063783d223234222063793d2231342e35222072783d226108e08201527f32222072793d22332e35223e203c2f656c6c697073653e20000000000000000061090082015250565b6000612d9561091883612262565b9150612da08261226d565b61091882019050919050565b7f3c7061746820643d224d3231203132612e3939392e3939392030203020312d2e60008201527f3730372d312e3730374332342e35333720362e3034392032382e38313920362060208201527f3239203661312031203020302031202e3030352032632d2e3036352e3030312d60408201527f332e3638372e3039362d372e32393820332e373037412e3939372e393937203060608201527f203020312032312031327a6d2d362030612e3939372e3939372030203020312d60808201527f2e3730372d2e3239334331302e36363720382e30383220372e3033312038203660a08201527f2e393935203861312e30303220312e3030322030203020312d2e3939322d312e60c08201527f303035412e3939372e39393720302030203120372036632e3138203020342e3460e08201527f36332e30343920382e37303720342e323933412e3939392e39393920302030206101008201527f312031352031327a223e203c2f706174683e000000000000000000000000000061012082015250565b6000612f3b61013283612262565b9150612f4682612dac565b61013282019050919050565b7f3c2f673e203c2f673e3c2f7376673e0000000000000000000000000000000000600082015250565b6000612f88600f83612262565b9150612f9382612f52565b600f82019050919050565b6000612fa982612d87565b9150612fb482612f2d565b9150612fbf82612f7b565b9150819050919050565b7f646174613a696d6167652f7376672b786d6c3b6261736536342c000000000000600082015250565b6000612fff601a83612262565b915061300a82612fc9565b601a82019050919050565b600061302082611b12565b61302a8185612262565b935061303a818560208601611b2e565b80840191505092915050565b600061305182612ff2565b915061305d8284613015565b915081905092915050565b7f7b226e616d65223a225361697961506574222c2022696d616765223a22000000600082015250565b600061309e601d83612262565b91506130a982613068565b601d82019050919050565b600081905092915050565b60006130ca8261217f565b6130d481856130b4565b93506130e4818560208601611b2e565b80840191505092915050565b7f222c20226465736372697074696f6e223a2022227d0000000000000000000000600082015250565b6000613126601583612262565b9150613131826130f0565b601582019050919050565b600061314782613091565b915061315382846130bf565b915061315e82613119565b915081905092915050565b7f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c000000600082015250565b600061319f601d83612262565b91506131aa82613169565b601d82019050919050565b60006131c082613192565b91506131cc8284613015565b915081905092915050565b7f3c7376672077696474683d22313030707822206865696768743d22313030707860008201527f222076696577426f783d223020302033362e30302033362e30302220786d6c6e60208201527f733d22687474703a2f2f7777772e77332e6f72672f323030302f73766722207860408201527f6d6c6e733a786c696e6b3d22687474703a2f2f7777772e77332e6f72672f313960608201527f39392f786c696e6b2220617269612d68696464656e3d22747275652220726f6c60808201527f653d22696d672220636c6173733d2269636f6e6966792069636f6e6966792d2d60a08201527f7477656d6f6a6922207072657365727665417370656374526174696f3d22784d60c08201527f6964594d6964206d656574222066696c6c3d222334303430343022207374726f60e08201527f6b653d222334303430343022207374726f6b652d77696474683d22302e3732226101008201527f207472616e73666f726d3d226d617472697828312c20302c20302c20312c20306101208201527f2c203029223e000000000000000000000000000000000000000000000000000061014082015250565b600061338d61014683612262565b9150613398826131d7565b61014682019050919050565b7f3c672069643d225356475265706f5f62674361727269657222207374726f6b6560008201527f2d77696474683d2230223e3c2f673e3c672069643d225356475265706f5f747260208201527f616365724361727269657222207374726f6b652d6c696e656361703d22726f7560408201527f6e6422207374726f6b652d6c696e656a6f696e3d22726f756e6422207374726f60608201527f6b653d222343434343434322207374726f6b652d77696474683d22302e32313660808201527f3030303030303030303030303033223e3c2f673e3c672069643d22535647526560a08201527f706f5f69636f6e43617272696572223e203c706174682066696c6c3d2223666660c08201527f666666662220643d224d33352e3733342031392e3932394333352e333735203160e08201527f362e36362033352031352033342031336330203020332d3920312d31322e37636101008201527f2d2e3637342d312e3234362d372e34303420312e3638382d313020332e3763306101208201527f20302d342d2e3939382d372d2e3939385331312034203131203443382e3430346101408201527f20312e39383820312e3637342d2e3934362031202e33432d31203420322031336101608201527f20322031334331203135202e3632352031362e36362e3236362031392e3932396101808201527f432d2e3132392032332e3531332e3635372032362e33372031203237632e33396101a08201527f2e37313620322e33363720332e303235203520356334203320313020342031326101c08201527f203473382d312031322d3463322e3633332d312e39373520342e36312d342e326101e08201527f383420352d35632e3334332d2e363320312e3132392d332e3438372e3733342d6102008201527f372e3037317a223e203c2f706174683e203c706174682066696c6c3d222365666102208201527f653336322220643d224d31382031392e35633320302033202e35203320312e356102408201527f732d312e3520332d332033732d332d322d332d33732d2e3030312d312e3520336102608201527f2d312e357a223e203c2f706174683e203c706174682066696c6c3d22236566656102808201527f3336322220643d224d322033632e3434372d312e33343220352e3634203120366102a08201527f2e3634203243382e36342035203420382033203131633020302d322d352d312d6102c08201527f387a6d33322030632d2e3434372d312e3334322d352e363420312d362e3634206102e08201527f326330203020342e3634203320352e363420366330203020322d3520312d387a6103008201527f223e203c2f706174683e203c706174682066696c6c3d222366666666666622206103208201527f643d224d342e39333420352e36303343342e39333420342e31383920313120376103408201527f2031302038732d3220312e3630332d3320322e363033732d322e3036362d342d6103608201527f322e3036362d357a6d32362e31333220304333312e30363620342e31383920326103808201527f3520372032362038733220312e363033203320322e36303373322e3036362d346103a08201527f20322e3036362d357a223e203c2f706174683e203c706174682066696c6c3d226103c08201527f236566653336322220643d224d2e373031203235612e352e352030203020312d6103e08201527f2e33312d2e383932632e3136322d2e31323720342e30322d332e31322031302e6104008201527f3634382d322e363035632e3237352e30322e3438312e3236312e34362e3533366104208201527f632d2e3032312e3237352d2e3235372e3530312d2e3533372e3436632d362e326104408201527f33332d2e3437342d392e39313520322e3336362d392e39353120322e333935616104608201527f2e35312e35312030203020312d2e33312e3130367a6d382e3836382d342e36366104808201527f33612e3531322e3531322030203020312d2e3134392d2e303232632d342e37396104a08201527f2d312e3439372d382e3733372d2e3334372d382e3737372d2e333336612e34396104c08201527f392e3439392030203120312d2e3238382d2e393537632e3137332d2e303532206104e08201527f342e3238362d312e32343720392e3336322e333338612e352e352030203020316105008201527f2d2e3134382e3937377a4d33352e323939203235612e352e35203020302030206105208201527f2e33312d2e383932632d2e3136322d2e3132372d342e30322d332e31322d31306105408201527f2e3634382d322e363035612e3439392e3439392030203020302d2e34362e35336105608201527f36632e3032312e3237352e3235372e3530312e3533372e343663362e3233332d6105808201527f2e34373420392e39313520322e33363620392e39353120322e333935612e35316105a08201527f2e3531203020302030202e33312e3130367a6d2d382e3836382d342e363633636105c08201527f2e3034392030202e312d2e3030372e3134392d2e30323263342e37392d312e346105e08201527f393720382e3733372d2e33343720382e3737372d2e333336612e3439392e34396106008201527f39203020312030202e3238382d2e393537632d2e3137332d2e3035322d342e326106208201527f38362d312e3234372d392e3336322e333338612e352e35203020302030202e316106408201527f34382e3937377a223e203c2f706174683e203c706174682066696c6c3d2223656106608201527f66653336322220643d224d32352e3332372032352e363232612e352e352030206106808201527f3020302d2e3535312d2e3036396c2d342032632d312e3837312e3933352d362e6106a08201527f3732372e3934372d362e3737362e393437612e352e352030203020302d2e32356106c08201527f2e393333762e303031682e303031762e303031632e3037312e30342e3135332e6106e08201527f3036332e32342e30363568372e30303863322e363538203020342e3038392d326107008201527f2e31383620342e3437352d332e333432612e352e352030203020302d2e3134376107208201527f2d2e3533367a223e203c2f706174683e203c672066696c6c3d222365666533366107408201527f32223e203c656c6c697073652063783d223132222063793d2231342e352220726107608201527f783d2232222072793d22332e35223e203c2f656c6c697073653e203c656c6c696107808201527f7073652063783d223234222063793d2231342e35222072783d2232222072793d6107a08201527f22332e35223e203c2f656c6c697073653e203c7061746820643d224d323120316107c08201527f32612e3939392e3939392030203020312d2e3730372d312e3730374332342e356107e08201527f333720362e3034392032382e38313920362032392036613120312030203020316108008201527f202e3030352032632d2e3036352e3030312d332e3638372e3039362d372e32396108208201527f3820332e373037412e3939372e3939372030203020312032312031327a6d2d366108408201527f2030612e3939372e3939372030203020312d2e3730372d2e3239334331302e366108608201527f363720382e30383220372e303331203820362e393935203861312e30303220316108808201527f2e3030322030203020312d2e3939322d312e303035412e3939372e39393720306108a08201527f2030203120372036632e3138203020342e3436332e30343920382e37303720346108c08201527f2e323933412e3939392e3939392030203020312031352031327a223e203c2f706108e08201527f6174683e203c2f673e203c2f673e3c2f7376673e00000000000000000000000061090082015250565b6000613ecc61091483612262565b9150613ed7826133a4565b61091482019050919050565b7f3c7061746820643d224d3231203132612e3939392e3939392030203020312d2e60008201527f3730372d312e3730374332342e35333720362e3034392032382e38313920362060208201527f3239203661312031203020302031202e3030352032632d2e3036352e3030312d60408201527f332e3638372e3039362d372e32393820332e373037412e3939372e393937203060608201527f203020312032312031327a6d2d362030612e3939372e3939372030203020312d60808201527f2e3730372d2e3239334331302e36363720382e30383220372e3033312038203660a08201527f2e393935203861312e30303220312e3030322030203020312d2e3939322d312e60c08201527f303035412e3939372e39393720302030203120372036632e3138203020342e3460e08201527f36332e30343920382e37303720342e323933412e3939392e39393920302030206101008201527f312031352031327a223e3c2f706174683e00000000000000000000000000000061012082015250565b600061407261013183612262565b915061407d82613ee3565b61013182019050919050565b60006140948261337f565b915061409f82613ebe565b91506140aa82614064565b91506140b582612f7b565b9150819050919050565b7f3c672069643d225356475265706f5f62674361727269657222207374726f6b6560008201527f2d77696474683d2230223e3c2f673e3c672069643d225356475265706f5f747260208201527f616365724361727269657222207374726f6b652d6c696e656361703d22726f7560408201527f6e6422207374726f6b652d6c696e656a6f696e3d22726f756e6422207374726f60608201527f6b653d222343434343434322207374726f6b652d77696474683d22302e32313660808201527f3030303030303030303030303033223e3c2f673e3c672069643d22535647526560a08201527f706f5f69636f6e43617272696572223e203c706174682066696c6c3d2223666660c08201527f666666662220643d224d33352e3733342031392e3932394333352e333735203160e08201527f362e36362033352031352033342031336330203020332d3920312d31322e37636101008201527f2d2e3637342d312e3234362d372e34303420312e3638382d313020332e3763306101208201527f20302d342d2e3939382d372d2e3939385331312034203131203443382e3430346101408201527f20312e39383820312e3637342d2e3934362031202e33432d31203420322031336101608201527f20322031334331203135202e3632352031362e36362e3236362031392e3932396101808201527f432d2e3132392032332e3531332e3635372032362e33372031203237632e33396101a08201527f2e37313620322e33363720332e303235203520356334203320313020342031326101c08201527f203473382d312031322d3463322e3633332d312e39373520342e36312d342e326101e08201527f383420352d35632e3334332d2e363320312e3132392d332e3438372e3733342d6102008201527f372e3037317a223e203c2f706174683e203c706174682066696c6c3d222366666102208201527f373037302220643d224d31382031392e35633320302033202e35203320312e356102408201527f732d312e3520332d332033732d332d322d332d33732d2e3030312d312e3520336102608201527f2d312e357a223e203c2f706174683e203c706174682066696c6c3d22236666376102808201527f3037302220643d224d322033632e3434372d312e33343220352e3634203120366102a08201527f2e3634203243382e36342035203420382033203131633020302d322d352d312d6102c08201527f387a6d33322030632d2e3434372d312e3334322d352e363420312d362e3634206102e08201527f326330203020342e3634203320352e363420366330203020322d3520312d387a6103008201527f223e203c2f706174683e203c706174682066696c6c3d222366666666666622206103208201527f643d224d342e39333420352e36303343342e39333420342e31383920313120376103408201527f2031302038732d3220312e3630332d3320322e363033732d322e3036362d342d6103608201527f322e3036362d357a6d32362e31333220304333312e30363620342e31383920326103808201527f3520372032362038733220312e363033203320322e36303373322e3036362d346103a08201527f20322e3036362d357a223e203c2f706174683e203c706174682066696c6c3d226103c08201527f236666373037302220643d224d2e373031203235612e352e352030203020312d6103e08201527f2e33312d2e383932632e3136322d2e31323720342e30322d332e31322031302e6104008201527f3634382d322e363035632e3237352e30322e3438312e3236312e34362e3533366104208201527f632d2e3032312e3237352d2e3235372e3530312d2e3533372e3436632d362e326104408201527f33332d2e3437342d392e39313520322e3336362d392e39353120322e333935616104608201527f2e35312e35312030203020312d2e33312e3130367a6d382e3836382d342e36366104808201527f33612e3531322e3531322030203020312d2e3134392d2e303232632d342e37396104a08201527f2d312e3439372d382e3733372d2e3334372d382e3737372d2e333336612e34396104c08201527f392e3439392030203120312d2e3238382d2e393537632e3137332d2e303532206104e08201527f342e3238362d312e32343720392e3336322e333338612e352e352030203020316105008201527f2d2e3134382e3937377a4d33352e323939203235612e352e35203020302030206105208201527f2e33312d2e383932632d2e3136322d2e3132372d342e30322d332e31322d31306105408201527f2e3634382d322e363035612e3439392e3439392030203020302d2e34362e35336105608201527f36632e3032312e3237352e3235372e3530312e3533372e343663362e3233332d6105808201527f2e34373420392e39313520322e33363620392e39353120322e333935612e35316105a08201527f2e3531203020302030202e33312e3130367a6d2d382e3836382d342e363633636105c08201527f2e3034392030202e312d2e3030372e3134392d2e30323263342e37392d312e346105e08201527f393720382e3733372d2e33343720382e3737372d2e333336612e3439392e34396106008201527f39203020312030202e3238382d2e393537632d2e3137332d2e3035322d342e326106208201527f38362d312e3234372d392e3336322e333338612e352e35203020302030202e316106408201527f34382e3937377a223e203c2f706174683e203c706174682066696c6c3d2223666106608201527f66373037302220643d224d32352e3332372032352e363232612e352e352030206106808201527f3020302d2e3535312d2e3036396c2d342032632d312e3837312e3933352d362e6106a08201527f3732372e3934372d362e3737362e393437612e352e352030203020302d2e32356106c08201527f2e393333762e303031682e303031762e303031632e3037312e30342e3135332e6106e08201527f3036332e32342e30363568372e30303863322e363538203020342e3038392d326107008201527f2e31383620342e3437352d332e333432612e352e352030203020302d2e3134376107208201527f2d2e3533367a223e203c2f706174683e203c672066696c6c3d222366663730376107408201527f30223e203c656c6c697073652063783d223132222063793d2231342e352220726107608201527f783d2232222072793d22332e35223e203c2f656c6c697073653e203c656c6c696107808201527f7073652063783d223234222063793d2231342e35222072783d2232222072793d6107a08201527f22332e35223e203c2f656c6c697073653e203c7061746820643d224d323120316107c08201527f32612e3939392e3939392030203020312d2e3730372d312e3730374332342e356107e08201527f333720362e3034392032382e38313920362032392036613120312030203020316108008201527f202e3030352032632d2e3036352e3030312d332e3638372e3039362d372e32396108208201527f3820332e373037412e3939372e3939372030203020312032312031327a6d2d366108408201527f2030612e3939372e3939372030203020312d2e3730372d2e3239334331302e366108608201527f363720382e30383220372e303331203820362e393935203861312e30303220316108808201527f2e3030322030203020312d2e3939322d312e303035412e3939372e39393720306108a08201527f2030203120372036632e3138203020342e3436332e30343920382e37303720346108c08201527f2e323933412e3939392e3939392030203020312031352031327a223e200000006108e082015250565b6000614bc06108fd83612262565b9150614bcb826140bf565b6108fd82019050919050565b7f3c2f706174683e203c2f673e203c2f673e3c2f7376673e000000000000000000600082015250565b6000614c0d601783612262565b9150614c1882614bd7565b601782019050919050565b6000614c2e8261337f565b9150614c3982614bb2565b9150614c4482614c00565b9150819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000614c8882611bc4565b9150614c9383611bc4565b925082614ca357614ca2614c4e565b5b828204905092915050565b6000614cb982611bc4565b9150614cc483611bc4565b9250828202614cd281611bc4565b91508282048414831517614ce957614ce86120d4565b5b5092915050565b6000604082019050614d056000830185611c59565b614d126020830184611d6f565b939250505056fe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa26469706673582212203f012655a7dce0dc566f15106d34001055857554fe886740d1aa6e7416c7dbcd64736f6c63430008140033",
  "deployedBytecode": "",
  "devdoc": {
    "errors": {
      "ERC721IncorrectOwner(address,uint256,address)": [
        {
          "details": "Indicates an error related to the ownership over a particular token. Used in transfers.",
          "params": {
            "owner": "Address of the current owner of a token.",
            "sender": "Address whose tokens are being transferred.",
            "tokenId": "Identifier number of a token."
          }
        }
      ],
      "ERC721InsufficientApproval(address,uint256)": [
        {
          "details": "Indicates a failure with the `operator`’s approval. Used in transfers.",
          "params": {
            "operator": "Address that may be allowed to operate on tokens without being their owner.",
            "tokenId": "Identifier number of a token."
          }
        }
      ],
      "ERC721InvalidApprover(address)": [
        {
          "details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
          "params": {
            "approver": "Address initiating an approval operation."
          }
        }
      ],
      "ERC721InvalidOperator(address)": [
        {
          "details": "Indicates a failure with the `operator` to be approved. Used in approvals.",
          "params": {
            "operator": "Address that may be allowed to operate on tokens without being their owner."
          }
        }
      ],
      "ERC721InvalidOwner(address)": [
        {
          "details": "Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20. Used in balance queries.",
          "params": {
            "owner": "Address of the current owner of a token."
          }
        }
      ],
      "ERC721InvalidReceiver(address)": [
        {
          "details": "Indicates a failure with the token `receiver`. Used in transfers.",
          "params": {
            "receiver": "Address to which tokens are being transferred."
          }
        }
      ],
      "ERC721InvalidSender(address)": [
        {
          "details": "Indicates a failure with the token `sender`. Used in transfers.",
          "params": {
            "sender": "Address whose tokens are being transferred."
          }
        }
      ],
      "ERC721NonexistentToken(uint256)": [
        {
          "details": "Indicates a `tokenId` whose `owner` is the zero address.",
          "params": {
            "tokenId": "Identifier number of a token."
          }
        }
      ],
      "EnforcedPause()": [
        {
          "details": "The operation failed because the contract is paused."
        }
      ],
      "ExpectedPause()": [
        {
          "details": "The operation failed because the contract is not paused."
        }
      ]
    },
    "events": {
      "Approval(address,address,uint256)": {
        "details": "Emitted when `owner` enables `approved` to manage the `tokenId` token."
      },
      "ApprovalForAll(address,address,bool)": {
        "details": "Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
      },
      "Paused(address)": {
        "details": "Emitted when the pause is triggered by `account`."
      },
      "Transfer(address,address,uint256)": {
        "details": "Emitted when `tokenId` token is transferred from `from` to `to`."
      },
      "Unpaused(address)": {
        "details": "Emitted when the pause is lifted by `account`."
      }
    },
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "burn(uint256)": {
        "details": "Burns `tokenId`. See {ERC721-_burn}. Requirements: - The caller must own `tokenId` or be an approved operator."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6487,
        "contract": "contracts/SaiyaPetTest.sol:SaiyaPetTest",
        "label": "pets",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_struct(Trait)6482_storage)"
      },
      {
        "astId": 1156,
        "contract": "contracts/SaiyaPetTest.sol:SaiyaPetTest",
        "label": "_name",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 1158,
        "contract": "contracts/SaiyaPetTest.sol:SaiyaPetTest",
        "label": "_symbol",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 1162,
        "contract": "contracts/SaiyaPetTest.sol:SaiyaPetTest",
        "label": "_owners",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 1166,
        "contract": "contracts/SaiyaPetTest.sol:SaiyaPetTest",
        "label": "_balances",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1170,
        "contract": "contracts/SaiyaPetTest.sol:SaiyaPetTest",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 1176,
        "contract": "contracts/SaiyaPetTest.sol:SaiyaPetTest",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 2445,
        "contract": "contracts/SaiyaPetTest.sol:SaiyaPetTest",
        "label": "_paused",
        "offset": 0,
        "slot": "7",
        "type": "t_bool"
      },
      {
        "astId": 6337,
        "contract": "contracts/SaiyaPetTest.sol:SaiyaPetTest",
        "label": "_nextTokenId",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_struct(Trait)6482_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Pet.Trait)",
        "numberOfBytes": "32",
        "value": "t_struct(Trait)6482_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Trait)6482_storage": {
        "encoding": "inplace",
        "label": "struct Pet.Trait",
        "members": [
          {
            "astId": 6477,
            "contract": "contracts/SaiyaPetTest.sol:SaiyaPetTest",
            "label": "level",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 6479,
            "contract": "contracts/SaiyaPetTest.sol:SaiyaPetTest",
            "label": "exp",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 6481,
            "contract": "contracts/SaiyaPetTest.sol:SaiyaPetTest",
            "label": "hp",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}