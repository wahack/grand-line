{
  "address": "0xD3cB171A68aAbcf8578A071479Cf4b1F6479927e",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "AddressEmptyCode",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "AddressInsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedInnerCall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_contract",
          "type": "address"
        }
      ],
      "name": "ApproveContract",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_contract",
          "type": "address"
        }
      ],
      "name": "DenyContract",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "GrantApproval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "RevokeApproval",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_contract",
          "type": "address"
        }
      ],
      "name": "approveContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "contracts",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_contract",
          "type": "address"
        }
      ],
      "name": "denyContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "grantApproval",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "revokeApproval",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "revokedApproval",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collection",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferERC1155",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collection",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferERC721",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collection",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferERC721Unsafe",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xecf2afd43e54249930e2758e6c542ac162b878a843c4cdf9574424df1421c484",
  "receipt": {
    "to": null,
    "from": "0x3ED057fC73d36894Cf6d15538c026B22e1277def",
    "contractAddress": "0xD3cB171A68aAbcf8578A071479Cf4b1F6479927e",
    "transactionIndex": 0,
    "gasUsed": "1249261",
    "logsBloom": "0x000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000004000000000000000000000000200000000000000000008000000000000000000000000000100044000000000000000000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000200000000000000000000000000000000",
    "blockHash": "0x24e61abfba469a7227f6128999cab8422dad8d9f3a68a1241162a1781fff3a0c",
    "transactionHash": "0xecf2afd43e54249930e2758e6c542ac162b878a843c4cdf9574424df1421c484",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 2,
        "transactionHash": "0xecf2afd43e54249930e2758e6c542ac162b878a843c4cdf9574424df1421c484",
        "address": "0xD3cB171A68aAbcf8578A071479Cf4b1F6479927e",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000003ed057fc73d36894cf6d15538c026b22e1277def"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x24e61abfba469a7227f6128999cab8422dad8d9f3a68a1241162a1781fff3a0c"
      }
    ],
    "blockNumber": 2,
    "cumulativeGasUsed": "1249261",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x3ED057fC73d36894Cf6d15538c026B22e1277def"
  ],
  "numDeployments": 1,
  "solcInputHash": "07af06fba2fa04d474ad023ff21730db",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"ApproveContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"DenyContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"GrantApproval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"RevokeApproval\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"approveContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"contracts\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"denyContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"grantApproval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revokeApproval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"revokedApproval\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferERC1155\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferERC721\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferERC721Unsafe\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Proxy contract to manage user token approvals\",\"errors\":{\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"AddressInsufficientBalance(address)\":[{\"details\":\"The ETH balance of the account is not enough to perform the operation.\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"kind\":\"dev\",\"methods\":{\"approveContract(address)\":{\"details\":\"Approve contract to call transfer functions\",\"params\":{\"_contract\":\"address of contract to approve\"}},\"denyContract(address)\":{\"details\":\"Revoke approval of contract to call transfer functions\",\"params\":{\"_contract\":\"address of contract to revoke approval\"}},\"grantApproval()\":{\"details\":\"Allow contract to make transfers on-behalf of a specific user\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"revokeApproval()\":{\"details\":\"Block contract from making transfers on-behalf of a specific user\"},\"transferERC1155(address,address,address,uint256,uint256)\":{\"details\":\"Transfer ERC1155 token using `safeTransferFrom`\",\"params\":{\"amount\":\"amount\",\"collection\":\"address of the collection\",\"from\":\"address of the sender\",\"to\":\"address of the recipient\",\"tokenId\":\"tokenId\"}},\"transferERC20(address,address,address,uint256)\":{\"details\":\"Transfer ERC20 token\",\"params\":{\"amount\":\"amount\",\"from\":\"address of the sender\",\"to\":\"address of the recipient\",\"token\":\"address of the token\"}},\"transferERC721(address,address,address,uint256)\":{\"details\":\"Transfer ERC721 token using `safeTransferFrom`\",\"params\":{\"collection\":\"address of the collection\",\"from\":\"address of the sender\",\"to\":\"address of the recipient\",\"tokenId\":\"tokenId\"}},\"transferERC721Unsafe(address,address,address,uint256)\":{\"details\":\"Transfer ERC721 token using `transferFrom`\",\"params\":{\"collection\":\"address of the collection\",\"from\":\"address of the sender\",\"to\":\"address of the recipient\",\"tokenId\":\"tokenId\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"ExecutionDelegate\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ExecutionDelegate.sol\":\"ExecutionDelegate\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` amount of tokens of type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the value of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] calldata accounts,\\n        uint256[] calldata ids\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens of type `id` from `from` to `to`.\\n     *\\n     * WARNING: This function can potentially allow a reentrancy attack when transferring tokens\\n     * to an untrusted contract, when invoking {onERC1155Received} on the receiver.\\n     * Ensure to follow the checks-effects-interactions pattern and consider employing\\n     * reentrancy guards when interacting with untrusted contracts.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `value` amount.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * WARNING: This function can potentially allow a reentrancy attack when transferring tokens\\n     * to an untrusted contract, when invoking {onERC1155BatchReceived} on the receiver.\\n     * Ensure to follow the checks-effects-interactions pattern and consider employing\\n     * reentrancy guards when interacting with untrusted contracts.\\n     *\\n     * Emits either a {TransferSingle} or a {TransferBatch} event, depending on the length of the array arguments.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `values` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6caffc9cfdc623eca9f87a686071708af5d5c17454d65022843fdddbc53c0cce\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5ef46daa3b58ef2702279d514780316efaa952915ee1aa3396f041ee2982b0b4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"contracts/ExecutionDelegate.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\nimport '@openzeppelin/contracts/token/ERC1155/IERC1155.sol';\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport '@openzeppelin/contracts/utils/Address.sol';\\n\\nimport {IExecutionDelegate} from './interfaces/IExecutionDelegate.sol';\\n\\n/**\\n * @title ExecutionDelegate\\n * @dev Proxy contract to manage user token approvals\\n */\\ncontract ExecutionDelegate is IExecutionDelegate, Ownable {\\n  using Address for address;\\n\\n  mapping(address => bool) public contracts;\\n  mapping(address => bool) public revokedApproval;\\n\\n  constructor(address _owner) Ownable(_owner) {}\\n\\n  modifier approvedContract() {\\n    require(contracts[msg.sender], 'Contract is not approved to make transfer');\\n    _;\\n  }\\n\\n  event ApproveContract(address indexed _contract);\\n  event DenyContract(address indexed _contract);\\n\\n  event RevokeApproval(address indexed user);\\n  event GrantApproval(address indexed user);\\n\\n  /**\\n   * @dev Approve contract to call transfer functions\\n   * @param _contract address of contract to approve\\n   */\\n  function approveContract(address _contract) external onlyOwner {\\n    contracts[_contract] = true;\\n    emit ApproveContract(_contract);\\n  }\\n\\n  /**\\n   * @dev Revoke approval of contract to call transfer functions\\n   * @param _contract address of contract to revoke approval\\n   */\\n  function denyContract(address _contract) external onlyOwner {\\n    contracts[_contract] = false;\\n    emit DenyContract(_contract);\\n  }\\n\\n  /**\\n   * @dev Block contract from making transfers on-behalf of a specific user\\n   */\\n  function revokeApproval() external {\\n    revokedApproval[msg.sender] = true;\\n    emit RevokeApproval(msg.sender);\\n  }\\n\\n  /**\\n   * @dev Allow contract to make transfers on-behalf of a specific user\\n   */\\n  function grantApproval() external {\\n    revokedApproval[msg.sender] = false;\\n    emit GrantApproval(msg.sender);\\n  }\\n\\n  /**\\n   * @dev Transfer ERC721 token using `transferFrom`\\n   * @param collection address of the collection\\n   * @param from address of the sender\\n   * @param to address of the recipient\\n   * @param tokenId tokenId\\n   */\\n  function transferERC721Unsafe(\\n    address collection,\\n    address from,\\n    address to,\\n    uint256 tokenId\\n  ) external approvedContract {\\n    require(revokedApproval[from] == false, 'User has revoked approval');\\n    IERC721(collection).transferFrom(from, to, tokenId);\\n  }\\n\\n  /**\\n   * @dev Transfer ERC721 token using `safeTransferFrom`\\n   * @param collection address of the collection\\n   * @param from address of the sender\\n   * @param to address of the recipient\\n   * @param tokenId tokenId\\n   */\\n  function transferERC721(\\n    address collection,\\n    address from,\\n    address to,\\n    uint256 tokenId\\n  ) external approvedContract {\\n    require(revokedApproval[from] == false, 'User has revoked approval');\\n    IERC721(collection).safeTransferFrom(from, to, tokenId);\\n  }\\n\\n  /**\\n   * @dev Transfer ERC1155 token using `safeTransferFrom`\\n   * @param collection address of the collection\\n   * @param from address of the sender\\n   * @param to address of the recipient\\n   * @param tokenId tokenId\\n   * @param amount amount\\n   */\\n  function transferERC1155(\\n    address collection,\\n    address from,\\n    address to,\\n    uint256 tokenId,\\n    uint256 amount\\n  ) external approvedContract {\\n    require(revokedApproval[from] == false, 'User has revoked approval');\\n    IERC1155(collection).safeTransferFrom(from, to, tokenId, amount, '');\\n  }\\n\\n  /**\\n   * @dev Transfer ERC20 token\\n   * @param token address of the token\\n   * @param from address of the sender\\n   * @param to address of the recipient\\n   * @param amount amount\\n   */\\n  function transferERC20(address token, address from, address to, uint256 amount) external approvedContract {\\n    require(revokedApproval[from] == false, 'User has revoked approval');\\n    bytes memory data = abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, amount);\\n    bytes memory returndata = token.functionCall(data);\\n    if (returndata.length > 0) {\\n      require(abi.decode(returndata, (bool)), 'ERC20 transfer failed');\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xb440b8196c654b9d7155f0a307e401525367b2afe0d8a866a16a079a3078ae2f\",\"license\":\"MIT\"},\"contracts/interfaces/IExecutionDelegate.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\ninterface IExecutionDelegate {\\n  function approveContract(address _contract) external;\\n\\n  function denyContract(address _contract) external;\\n\\n  function revokeApproval() external;\\n\\n  function grantApproval() external;\\n\\n  function transferERC721Unsafe(address collection, address from, address to, uint256 tokenId) external;\\n\\n  function transferERC721(address collection, address from, address to, uint256 tokenId) external;\\n\\n  function transferERC1155(\\n    address collection,\\n    address from,\\n    address to,\\n    uint256 tokenId,\\n    uint256 amount\\n  ) external;\\n\\n  function transferERC20(address token, address from, address to, uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x10a84a039270fcc257b28e7f208a37c436ed54386770c570e287316c9e19f712\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162001788380380620017888339818101604052810190620000379190620001f4565b80600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603620000ad5760006040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600401620000a4919062000237565b60405180910390fd5b620000be81620000c660201b60201c565b505062000254565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001bc826200018f565b9050919050565b620001ce81620001af565b8114620001da57600080fd5b50565b600081519050620001ee81620001c3565b92915050565b6000602082840312156200020d576200020c6200018a565b5b60006200021d84828501620001dd565b91505092915050565b6200023181620001af565b82525050565b60006020820190506200024e600083018462000226565b92915050565b61152480620002646000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c80638da5cb5b1161008c578063b7e2077e11610066578063b7e2077e146101c4578063ca72da8e146101e0578063da3e8ce4146101fc578063f2fde38b14610218576100cf565b80638da5cb5b1461019257806390d02b3c146101b0578063a8034df1146101ba576100cf565b806307f7aafb146100d45780634a3e3a1f146100f057806369dc9ff314610120578063715018a61461015057806374a9402e1461015a578063789f93f614610176575b600080fd5b6100ee60048036038101906100e99190611018565b610234565b005b61010a60048036038101906101059190611018565b6102d9565b6040516101179190611060565b60405180910390f35b61013a60048036038101906101359190611018565b6102f9565b6040516101479190611060565b60405180910390f35b610158610319565b005b610174600480360381019061016f91906110b1565b61032d565b005b610190600480360381019061018b919061112c565b6104c4565b005b61019a610658565b6040516101a791906111a2565b60405180910390f35b6101b8610681565b005b6101c261071e565b005b6101de60048036038101906101d99190611018565b6107bb565b005b6101fa60048036038101906101f5919061112c565b610861565b005b6102166004803603810190610211919061112c565b6109f5565b005b610232600480360381019061022d9190611018565b610c25565b005b61023c610cab565b60018060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508073ffffffffffffffffffffffffffffffffffffffff167f283ffe02a14663588cf87ba17adbc21c9ce0d0cdb15655926bf2b987af3075fe60405160405180910390a250565b60026020528060005260406000206000915054906101000a900460ff1681565b60016020528060005260406000206000915054906101000a900460ff1681565b610321610cab565b61032b6000610d32565b565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166103b9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103b090611240565b60405180910390fd5b60001515600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615151461044c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610443906112ac565b60405180910390fd5b8473ffffffffffffffffffffffffffffffffffffffff1663f242432a858585856040518563ffffffff1660e01b815260040161048b9493929190611312565b600060405180830381600087803b1580156104a557600080fd5b505af11580156104b9573d6000803e3d6000fd5b505050505050505050565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610550576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161054790611240565b60405180910390fd5b60001515600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515146105e3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105da906112ac565b60405180910390fd5b8373ffffffffffffffffffffffffffffffffffffffff166342842e0e8484846040518463ffffffff1660e01b81526004016106209392919061136a565b600060405180830381600087803b15801561063a57600080fd5b505af115801561064e573d6000803e3d6000fd5b5050505050505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6001600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055503373ffffffffffffffffffffffffffffffffffffffff167fdddeac663983b1e35153215a4578fecbb5921d12e660b3c4259aa7d9dbb9709f60405160405180910390a2565b6000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055503373ffffffffffffffffffffffffffffffffffffffff167f120d91a0121c2d5a7ce9638fce4bd262d4b443568fce40f681f50dca814a629a60405160405180910390a2565b6107c3610cab565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508073ffffffffffffffffffffffffffffffffffffffff167f2b35b0a030b4f4cef0a9e8d01828235bb82a11ec4e37c11bd6d8770d9aafb17c60405160405180910390a250565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166108ed576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108e490611240565b60405180910390fd5b60001515600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151514610980576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610977906112ac565b60405180910390fd5b8373ffffffffffffffffffffffffffffffffffffffff166323b872dd8484846040518463ffffffff1660e01b81526004016109bd9392919061136a565b600060405180830381600087803b1580156109d757600080fd5b505af11580156109eb573d6000803e3d6000fd5b5050505050505050565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610a81576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a7890611240565b60405180910390fd5b60001515600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151514610b14576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b0b906112ac565b60405180910390fd5b60006323b872dd60e01b848484604051602401610b339392919061136a565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505090506000610bbd828773ffffffffffffffffffffffffffffffffffffffff16610df690919063ffffffff16565b9050600081511115610c1d5780806020019051810190610bdd91906113cd565b610c1c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c1390611446565b60405180910390fd5b5b505050505050565b610c2d610cab565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610c9f5760006040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600401610c9691906111a2565b60405180910390fd5b610ca881610d32565b50565b610cb3610e0c565b73ffffffffffffffffffffffffffffffffffffffff16610cd1610658565b73ffffffffffffffffffffffffffffffffffffffff1614610d3057610cf4610e0c565b6040517f118cdaa7000000000000000000000000000000000000000000000000000000008152600401610d2791906111a2565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6060610e0483836000610e14565b905092915050565b600033905090565b606081471015610e5b57306040517fcd786059000000000000000000000000000000000000000000000000000000008152600401610e5291906111a2565b60405180910390fd5b6000808573ffffffffffffffffffffffffffffffffffffffff168486604051610e8491906114d7565b60006040518083038185875af1925050503d8060008114610ec1576040519150601f19603f3d011682016040523d82523d6000602084013e610ec6565b606091505b5091509150610ed6868383610ee1565b925050509392505050565b606082610ef657610ef182610f70565b610f68565b60008251148015610f1e575060008473ffffffffffffffffffffffffffffffffffffffff163b145b15610f6057836040517f9996b315000000000000000000000000000000000000000000000000000000008152600401610f5791906111a2565b60405180910390fd5b819050610f69565b5b9392505050565b600081511115610f835780518082602001fd5b6040517f1425ea4200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610fe582610fba565b9050919050565b610ff581610fda565b811461100057600080fd5b50565b60008135905061101281610fec565b92915050565b60006020828403121561102e5761102d610fb5565b5b600061103c84828501611003565b91505092915050565b60008115159050919050565b61105a81611045565b82525050565b60006020820190506110756000830184611051565b92915050565b6000819050919050565b61108e8161107b565b811461109957600080fd5b50565b6000813590506110ab81611085565b92915050565b600080600080600060a086880312156110cd576110cc610fb5565b5b60006110db88828901611003565b95505060206110ec88828901611003565b94505060406110fd88828901611003565b935050606061110e8882890161109c565b925050608061111f8882890161109c565b9150509295509295909350565b6000806000806080858703121561114657611145610fb5565b5b600061115487828801611003565b945050602061116587828801611003565b935050604061117687828801611003565b92505060606111878782880161109c565b91505092959194509250565b61119c81610fda565b82525050565b60006020820190506111b76000830184611193565b92915050565b600082825260208201905092915050565b7f436f6e7472616374206973206e6f7420617070726f76656420746f206d616b6560008201527f207472616e736665720000000000000000000000000000000000000000000000602082015250565b600061122a6029836111bd565b9150611235826111ce565b604082019050919050565b600060208201905081810360008301526112598161121d565b9050919050565b7f5573657220686173207265766f6b656420617070726f76616c00000000000000600082015250565b60006112966019836111bd565b91506112a182611260565b602082019050919050565b600060208201905081810360008301526112c581611289565b9050919050565b6112d58161107b565b82525050565b600082825260208201905092915050565b50565b60006112fc6000836112db565b9150611307826112ec565b600082019050919050565b600060a0820190506113276000830187611193565b6113346020830186611193565b61134160408301856112cc565b61134e60608301846112cc565b818103608083015261135f816112ef565b905095945050505050565b600060608201905061137f6000830186611193565b61138c6020830185611193565b61139960408301846112cc565b949350505050565b6113aa81611045565b81146113b557600080fd5b50565b6000815190506113c7816113a1565b92915050565b6000602082840312156113e3576113e2610fb5565b5b60006113f1848285016113b8565b91505092915050565b7f4552433230207472616e73666572206661696c65640000000000000000000000600082015250565b60006114306015836111bd565b915061143b826113fa565b602082019050919050565b6000602082019050818103600083015261145f81611423565b9050919050565b600081519050919050565b600081905092915050565b60005b8381101561149a57808201518184015260208101905061147f565b60008484015250505050565b60006114b182611466565b6114bb8185611471565b93506114cb81856020860161147c565b80840191505092915050565b60006114e382846114a6565b91508190509291505056fea2646970667358221220f81c045c0f7db863fd6e15c0c7b73e495c595ec13db2889b1b686fa2f1e3407364736f6c63430008140033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100cf5760003560e01c80638da5cb5b1161008c578063b7e2077e11610066578063b7e2077e146101c4578063ca72da8e146101e0578063da3e8ce4146101fc578063f2fde38b14610218576100cf565b80638da5cb5b1461019257806390d02b3c146101b0578063a8034df1146101ba576100cf565b806307f7aafb146100d45780634a3e3a1f146100f057806369dc9ff314610120578063715018a61461015057806374a9402e1461015a578063789f93f614610176575b600080fd5b6100ee60048036038101906100e99190611018565b610234565b005b61010a60048036038101906101059190611018565b6102d9565b6040516101179190611060565b60405180910390f35b61013a60048036038101906101359190611018565b6102f9565b6040516101479190611060565b60405180910390f35b610158610319565b005b610174600480360381019061016f91906110b1565b61032d565b005b610190600480360381019061018b919061112c565b6104c4565b005b61019a610658565b6040516101a791906111a2565b60405180910390f35b6101b8610681565b005b6101c261071e565b005b6101de60048036038101906101d99190611018565b6107bb565b005b6101fa60048036038101906101f5919061112c565b610861565b005b6102166004803603810190610211919061112c565b6109f5565b005b610232600480360381019061022d9190611018565b610c25565b005b61023c610cab565b60018060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508073ffffffffffffffffffffffffffffffffffffffff167f283ffe02a14663588cf87ba17adbc21c9ce0d0cdb15655926bf2b987af3075fe60405160405180910390a250565b60026020528060005260406000206000915054906101000a900460ff1681565b60016020528060005260406000206000915054906101000a900460ff1681565b610321610cab565b61032b6000610d32565b565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166103b9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103b090611240565b60405180910390fd5b60001515600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615151461044c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610443906112ac565b60405180910390fd5b8473ffffffffffffffffffffffffffffffffffffffff1663f242432a858585856040518563ffffffff1660e01b815260040161048b9493929190611312565b600060405180830381600087803b1580156104a557600080fd5b505af11580156104b9573d6000803e3d6000fd5b505050505050505050565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610550576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161054790611240565b60405180910390fd5b60001515600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515146105e3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105da906112ac565b60405180910390fd5b8373ffffffffffffffffffffffffffffffffffffffff166342842e0e8484846040518463ffffffff1660e01b81526004016106209392919061136a565b600060405180830381600087803b15801561063a57600080fd5b505af115801561064e573d6000803e3d6000fd5b5050505050505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6001600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055503373ffffffffffffffffffffffffffffffffffffffff167fdddeac663983b1e35153215a4578fecbb5921d12e660b3c4259aa7d9dbb9709f60405160405180910390a2565b6000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055503373ffffffffffffffffffffffffffffffffffffffff167f120d91a0121c2d5a7ce9638fce4bd262d4b443568fce40f681f50dca814a629a60405160405180910390a2565b6107c3610cab565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508073ffffffffffffffffffffffffffffffffffffffff167f2b35b0a030b4f4cef0a9e8d01828235bb82a11ec4e37c11bd6d8770d9aafb17c60405160405180910390a250565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166108ed576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108e490611240565b60405180910390fd5b60001515600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151514610980576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610977906112ac565b60405180910390fd5b8373ffffffffffffffffffffffffffffffffffffffff166323b872dd8484846040518463ffffffff1660e01b81526004016109bd9392919061136a565b600060405180830381600087803b1580156109d757600080fd5b505af11580156109eb573d6000803e3d6000fd5b5050505050505050565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610a81576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a7890611240565b60405180910390fd5b60001515600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151514610b14576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b0b906112ac565b60405180910390fd5b60006323b872dd60e01b848484604051602401610b339392919061136a565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505090506000610bbd828773ffffffffffffffffffffffffffffffffffffffff16610df690919063ffffffff16565b9050600081511115610c1d5780806020019051810190610bdd91906113cd565b610c1c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c1390611446565b60405180910390fd5b5b505050505050565b610c2d610cab565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610c9f5760006040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600401610c9691906111a2565b60405180910390fd5b610ca881610d32565b50565b610cb3610e0c565b73ffffffffffffffffffffffffffffffffffffffff16610cd1610658565b73ffffffffffffffffffffffffffffffffffffffff1614610d3057610cf4610e0c565b6040517f118cdaa7000000000000000000000000000000000000000000000000000000008152600401610d2791906111a2565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6060610e0483836000610e14565b905092915050565b600033905090565b606081471015610e5b57306040517fcd786059000000000000000000000000000000000000000000000000000000008152600401610e5291906111a2565b60405180910390fd5b6000808573ffffffffffffffffffffffffffffffffffffffff168486604051610e8491906114d7565b60006040518083038185875af1925050503d8060008114610ec1576040519150601f19603f3d011682016040523d82523d6000602084013e610ec6565b606091505b5091509150610ed6868383610ee1565b925050509392505050565b606082610ef657610ef182610f70565b610f68565b60008251148015610f1e575060008473ffffffffffffffffffffffffffffffffffffffff163b145b15610f6057836040517f9996b315000000000000000000000000000000000000000000000000000000008152600401610f5791906111a2565b60405180910390fd5b819050610f69565b5b9392505050565b600081511115610f835780518082602001fd5b6040517f1425ea4200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610fe582610fba565b9050919050565b610ff581610fda565b811461100057600080fd5b50565b60008135905061101281610fec565b92915050565b60006020828403121561102e5761102d610fb5565b5b600061103c84828501611003565b91505092915050565b60008115159050919050565b61105a81611045565b82525050565b60006020820190506110756000830184611051565b92915050565b6000819050919050565b61108e8161107b565b811461109957600080fd5b50565b6000813590506110ab81611085565b92915050565b600080600080600060a086880312156110cd576110cc610fb5565b5b60006110db88828901611003565b95505060206110ec88828901611003565b94505060406110fd88828901611003565b935050606061110e8882890161109c565b925050608061111f8882890161109c565b9150509295509295909350565b6000806000806080858703121561114657611145610fb5565b5b600061115487828801611003565b945050602061116587828801611003565b935050604061117687828801611003565b92505060606111878782880161109c565b91505092959194509250565b61119c81610fda565b82525050565b60006020820190506111b76000830184611193565b92915050565b600082825260208201905092915050565b7f436f6e7472616374206973206e6f7420617070726f76656420746f206d616b6560008201527f207472616e736665720000000000000000000000000000000000000000000000602082015250565b600061122a6029836111bd565b9150611235826111ce565b604082019050919050565b600060208201905081810360008301526112598161121d565b9050919050565b7f5573657220686173207265766f6b656420617070726f76616c00000000000000600082015250565b60006112966019836111bd565b91506112a182611260565b602082019050919050565b600060208201905081810360008301526112c581611289565b9050919050565b6112d58161107b565b82525050565b600082825260208201905092915050565b50565b60006112fc6000836112db565b9150611307826112ec565b600082019050919050565b600060a0820190506113276000830187611193565b6113346020830186611193565b61134160408301856112cc565b61134e60608301846112cc565b818103608083015261135f816112ef565b905095945050505050565b600060608201905061137f6000830186611193565b61138c6020830185611193565b61139960408301846112cc565b949350505050565b6113aa81611045565b81146113b557600080fd5b50565b6000815190506113c7816113a1565b92915050565b6000602082840312156113e3576113e2610fb5565b5b60006113f1848285016113b8565b91505092915050565b7f4552433230207472616e73666572206661696c65640000000000000000000000600082015250565b60006114306015836111bd565b915061143b826113fa565b602082019050919050565b6000602082019050818103600083015261145f81611423565b9050919050565b600081519050919050565b600081905092915050565b60005b8381101561149a57808201518184015260208101905061147f565b60008484015250505050565b60006114b182611466565b6114bb8185611471565b93506114cb81856020860161147c565b80840191505092915050565b60006114e382846114a6565b91508190509291505056fea2646970667358221220f81c045c0f7db863fd6e15c0c7b73e495c595ec13db2889b1b686fa2f1e3407364736f6c63430008140033",
  "devdoc": {
    "details": "Proxy contract to manage user token approvals",
    "errors": {
      "AddressEmptyCode(address)": [
        {
          "details": "There's no code at `target` (it is not a contract)."
        }
      ],
      "AddressInsufficientBalance(address)": [
        {
          "details": "The ETH balance of the account is not enough to perform the operation."
        }
      ],
      "FailedInnerCall()": [
        {
          "details": "A call to an address target failed. The target may have reverted."
        }
      ],
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "approveContract(address)": {
        "details": "Approve contract to call transfer functions",
        "params": {
          "_contract": "address of contract to approve"
        }
      },
      "denyContract(address)": {
        "details": "Revoke approval of contract to call transfer functions",
        "params": {
          "_contract": "address of contract to revoke approval"
        }
      },
      "grantApproval()": {
        "details": "Allow contract to make transfers on-behalf of a specific user"
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "revokeApproval()": {
        "details": "Block contract from making transfers on-behalf of a specific user"
      },
      "transferERC1155(address,address,address,uint256,uint256)": {
        "details": "Transfer ERC1155 token using `safeTransferFrom`",
        "params": {
          "amount": "amount",
          "collection": "address of the collection",
          "from": "address of the sender",
          "to": "address of the recipient",
          "tokenId": "tokenId"
        }
      },
      "transferERC20(address,address,address,uint256)": {
        "details": "Transfer ERC20 token",
        "params": {
          "amount": "amount",
          "from": "address of the sender",
          "to": "address of the recipient",
          "token": "address of the token"
        }
      },
      "transferERC721(address,address,address,uint256)": {
        "details": "Transfer ERC721 token using `safeTransferFrom`",
        "params": {
          "collection": "address of the collection",
          "from": "address of the sender",
          "to": "address of the recipient",
          "tokenId": "tokenId"
        }
      },
      "transferERC721Unsafe(address,address,address,uint256)": {
        "details": "Transfer ERC721 token using `transferFrom`",
        "params": {
          "collection": "address of the collection",
          "from": "address of the sender",
          "to": "address of the recipient",
          "tokenId": "tokenId"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "ExecutionDelegate",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8,
        "contract": "contracts/ExecutionDelegate.sol:ExecutionDelegate",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 781,
        "contract": "contracts/ExecutionDelegate.sol:ExecutionDelegate",
        "label": "contracts",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 785,
        "contract": "contracts/ExecutionDelegate.sol:ExecutionDelegate",
        "label": "revokedApproval",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      }
    }
  }
}