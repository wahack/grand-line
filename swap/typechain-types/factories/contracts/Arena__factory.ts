/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../common";
import type { Arena, ArenaInterface } from "../../contracts/Arena";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "petId",
        type: "uint256",
      },
    ],
    name: "attack",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5060dc8061001f6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c806364dd891a14602d575b600080fd5b60436004803603810190603f9190607e565b6045565b005b50565b600080fd5b6000819050919050565b605e81604d565b8114606857600080fd5b50565b6000813590506078816057565b92915050565b60006020828403121560915760906048565b5b6000609d84828501606b565b9150509291505056fea2646970667358221220a2cec474b0e7f9ce91b188cbec94713f572658100e5b749a8b1055f46e45586664736f6c63430008140033";

type ArenaConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ArenaConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Arena__factory extends ContractFactory {
  constructor(...args: ArenaConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      Arena & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): Arena__factory {
    return super.connect(runner) as Arena__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ArenaInterface {
    return new Interface(_abi) as ArenaInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): Arena {
    return new Contract(address, _abi, runner) as unknown as Arena;
  }
}
