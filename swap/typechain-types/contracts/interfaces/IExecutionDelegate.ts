/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface IExecutionDelegateInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "approveContract"
      | "denyContract"
      | "grantApproval"
      | "revokeApproval"
      | "transferERC1155"
      | "transferERC20"
      | "transferERC721"
      | "transferERC721Unsafe"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "approveContract",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "denyContract",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantApproval",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "revokeApproval",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferERC1155",
    values: [AddressLike, AddressLike, AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferERC20",
    values: [AddressLike, AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferERC721",
    values: [AddressLike, AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferERC721Unsafe",
    values: [AddressLike, AddressLike, AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "approveContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "denyContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "grantApproval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeApproval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferERC1155",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferERC721",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferERC721Unsafe",
    data: BytesLike
  ): Result;
}

export interface IExecutionDelegate extends BaseContract {
  connect(runner?: ContractRunner | null): IExecutionDelegate;
  waitForDeployment(): Promise<this>;

  interface: IExecutionDelegateInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  approveContract: TypedContractMethod<
    [_contract: AddressLike],
    [void],
    "nonpayable"
  >;

  denyContract: TypedContractMethod<
    [_contract: AddressLike],
    [void],
    "nonpayable"
  >;

  grantApproval: TypedContractMethod<[], [void], "nonpayable">;

  revokeApproval: TypedContractMethod<[], [void], "nonpayable">;

  transferERC1155: TypedContractMethod<
    [
      collection: AddressLike,
      from: AddressLike,
      to: AddressLike,
      tokenId: BigNumberish,
      amount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  transferERC20: TypedContractMethod<
    [
      token: AddressLike,
      from: AddressLike,
      to: AddressLike,
      amount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  transferERC721: TypedContractMethod<
    [
      collection: AddressLike,
      from: AddressLike,
      to: AddressLike,
      tokenId: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  transferERC721Unsafe: TypedContractMethod<
    [
      collection: AddressLike,
      from: AddressLike,
      to: AddressLike,
      tokenId: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "approveContract"
  ): TypedContractMethod<[_contract: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "denyContract"
  ): TypedContractMethod<[_contract: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "grantApproval"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "revokeApproval"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferERC1155"
  ): TypedContractMethod<
    [
      collection: AddressLike,
      from: AddressLike,
      to: AddressLike,
      tokenId: BigNumberish,
      amount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferERC20"
  ): TypedContractMethod<
    [
      token: AddressLike,
      from: AddressLike,
      to: AddressLike,
      amount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferERC721"
  ): TypedContractMethod<
    [
      collection: AddressLike,
      from: AddressLike,
      to: AddressLike,
      tokenId: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferERC721Unsafe"
  ): TypedContractMethod<
    [
      collection: AddressLike,
      from: AddressLike,
      to: AddressLike,
      tokenId: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  filters: {};
}
