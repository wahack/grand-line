/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface IBlastInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "claimAllGas"
      | "claimAllYield"
      | "claimGas"
      | "claimGasAtMinClaimRate"
      | "claimMaxGas"
      | "claimYield"
      | "configure"
      | "configureAutomaticYield"
      | "configureAutomaticYieldOnBehalf"
      | "configureClaimableGas"
      | "configureClaimableGasOnBehalf"
      | "configureClaimableYield"
      | "configureClaimableYieldOnBehalf"
      | "configureContract"
      | "configureGovernor"
      | "configureGovernorOnBehalf"
      | "configureVoidGas"
      | "configureVoidGasOnBehalf"
      | "configureVoidYield"
      | "configureVoidYieldOnBehalf"
      | "readClaimableYield"
      | "readGasParams"
      | "readYieldConfiguration"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "claimAllGas",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "claimAllYield",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "claimGas",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimGasAtMinClaimRate",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimMaxGas",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "claimYield",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "configure",
    values: [BigNumberish, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "configureAutomaticYield",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "configureAutomaticYieldOnBehalf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "configureClaimableGas",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "configureClaimableGasOnBehalf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "configureClaimableYield",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "configureClaimableYieldOnBehalf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "configureContract",
    values: [AddressLike, BigNumberish, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "configureGovernor",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "configureGovernorOnBehalf",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "configureVoidGas",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "configureVoidGasOnBehalf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "configureVoidYield",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "configureVoidYieldOnBehalf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "readClaimableYield",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "readGasParams",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "readYieldConfiguration",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "claimAllGas",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimAllYield",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claimGas", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimGasAtMinClaimRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimMaxGas",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claimYield", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "configure", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "configureAutomaticYield",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "configureAutomaticYieldOnBehalf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "configureClaimableGas",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "configureClaimableGasOnBehalf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "configureClaimableYield",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "configureClaimableYieldOnBehalf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "configureContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "configureGovernor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "configureGovernorOnBehalf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "configureVoidGas",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "configureVoidGasOnBehalf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "configureVoidYield",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "configureVoidYieldOnBehalf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "readClaimableYield",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "readGasParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "readYieldConfiguration",
    data: BytesLike
  ): Result;
}

export interface IBlast extends BaseContract {
  connect(runner?: ContractRunner | null): IBlast;
  waitForDeployment(): Promise<this>;

  interface: IBlastInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  claimAllGas: TypedContractMethod<
    [contractAddress: AddressLike, recipientOfGas: AddressLike],
    [bigint],
    "nonpayable"
  >;

  claimAllYield: TypedContractMethod<
    [contractAddress: AddressLike, recipientOfYield: AddressLike],
    [bigint],
    "nonpayable"
  >;

  claimGas: TypedContractMethod<
    [
      contractAddress: AddressLike,
      recipientOfGas: AddressLike,
      gasToClaim: BigNumberish,
      gasSecondsToConsume: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  claimGasAtMinClaimRate: TypedContractMethod<
    [
      contractAddress: AddressLike,
      recipientOfGas: AddressLike,
      minClaimRateBips: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  claimMaxGas: TypedContractMethod<
    [contractAddress: AddressLike, recipientOfGas: AddressLike],
    [bigint],
    "nonpayable"
  >;

  claimYield: TypedContractMethod<
    [
      contractAddress: AddressLike,
      recipientOfYield: AddressLike,
      amount: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  configure: TypedContractMethod<
    [_yield: BigNumberish, gasMode: BigNumberish, governor: AddressLike],
    [void],
    "nonpayable"
  >;

  configureAutomaticYield: TypedContractMethod<[], [void], "nonpayable">;

  configureAutomaticYieldOnBehalf: TypedContractMethod<
    [contractAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  configureClaimableGas: TypedContractMethod<[], [void], "nonpayable">;

  configureClaimableGasOnBehalf: TypedContractMethod<
    [contractAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  configureClaimableYield: TypedContractMethod<[], [void], "nonpayable">;

  configureClaimableYieldOnBehalf: TypedContractMethod<
    [contractAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  configureContract: TypedContractMethod<
    [
      contractAddress: AddressLike,
      _yield: BigNumberish,
      gasMode: BigNumberish,
      governor: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  configureGovernor: TypedContractMethod<
    [_governor: AddressLike],
    [void],
    "nonpayable"
  >;

  configureGovernorOnBehalf: TypedContractMethod<
    [_newGovernor: AddressLike, contractAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  configureVoidGas: TypedContractMethod<[], [void], "nonpayable">;

  configureVoidGasOnBehalf: TypedContractMethod<
    [contractAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  configureVoidYield: TypedContractMethod<[], [void], "nonpayable">;

  configureVoidYieldOnBehalf: TypedContractMethod<
    [contractAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  readClaimableYield: TypedContractMethod<
    [contractAddress: AddressLike],
    [bigint],
    "view"
  >;

  readGasParams: TypedContractMethod<
    [contractAddress: AddressLike],
    [
      [bigint, bigint, bigint, bigint] & {
        etherSeconds: bigint;
        etherBalance: bigint;
        lastUpdated: bigint;
      }
    ],
    "view"
  >;

  readYieldConfiguration: TypedContractMethod<
    [contractAddress: AddressLike],
    [bigint],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "claimAllGas"
  ): TypedContractMethod<
    [contractAddress: AddressLike, recipientOfGas: AddressLike],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "claimAllYield"
  ): TypedContractMethod<
    [contractAddress: AddressLike, recipientOfYield: AddressLike],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "claimGas"
  ): TypedContractMethod<
    [
      contractAddress: AddressLike,
      recipientOfGas: AddressLike,
      gasToClaim: BigNumberish,
      gasSecondsToConsume: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "claimGasAtMinClaimRate"
  ): TypedContractMethod<
    [
      contractAddress: AddressLike,
      recipientOfGas: AddressLike,
      minClaimRateBips: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "claimMaxGas"
  ): TypedContractMethod<
    [contractAddress: AddressLike, recipientOfGas: AddressLike],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "claimYield"
  ): TypedContractMethod<
    [
      contractAddress: AddressLike,
      recipientOfYield: AddressLike,
      amount: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "configure"
  ): TypedContractMethod<
    [_yield: BigNumberish, gasMode: BigNumberish, governor: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "configureAutomaticYield"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "configureAutomaticYieldOnBehalf"
  ): TypedContractMethod<[contractAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "configureClaimableGas"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "configureClaimableGasOnBehalf"
  ): TypedContractMethod<[contractAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "configureClaimableYield"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "configureClaimableYieldOnBehalf"
  ): TypedContractMethod<[contractAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "configureContract"
  ): TypedContractMethod<
    [
      contractAddress: AddressLike,
      _yield: BigNumberish,
      gasMode: BigNumberish,
      governor: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "configureGovernor"
  ): TypedContractMethod<[_governor: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "configureGovernorOnBehalf"
  ): TypedContractMethod<
    [_newGovernor: AddressLike, contractAddress: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "configureVoidGas"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "configureVoidGasOnBehalf"
  ): TypedContractMethod<[contractAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "configureVoidYield"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "configureVoidYieldOnBehalf"
  ): TypedContractMethod<[contractAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "readClaimableYield"
  ): TypedContractMethod<[contractAddress: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "readGasParams"
  ): TypedContractMethod<
    [contractAddress: AddressLike],
    [
      [bigint, bigint, bigint, bigint] & {
        etherSeconds: bigint;
        etherBalance: bigint;
        lastUpdated: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "readYieldConfiguration"
  ): TypedContractMethod<[contractAddress: AddressLike], [bigint], "view">;

  filters: {};
}
