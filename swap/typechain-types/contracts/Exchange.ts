/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export type OrderStruct = {
  seller: AddressLike;
  assetType: BigNumberish;
  collection: AddressLike;
  tokenId: BigNumberish;
  amount: BigNumberish;
  paymentToken: AddressLike;
  price: BigNumberish;
  listingTime: BigNumberish;
  expirationTime: BigNumberish;
  salt: BigNumberish;
};

export type OrderStructOutput = [
  seller: string,
  assetType: bigint,
  collection: string,
  tokenId: bigint,
  amount: bigint,
  paymentToken: string,
  price: bigint,
  listingTime: bigint,
  expirationTime: bigint,
  salt: bigint
] & {
  seller: string;
  assetType: bigint;
  collection: string;
  tokenId: bigint;
  amount: bigint;
  paymentToken: string;
  price: bigint;
  listingTime: bigint;
  expirationTime: bigint;
  salt: bigint;
};

export type InputStruct = {
  order: OrderStruct;
  signatureBuyer: BytesLike;
  signatureSeller: BytesLike;
};

export type InputStructOutput = [
  order: OrderStructOutput,
  signatureBuyer: string,
  signatureSeller: string
] & {
  order: OrderStructOutput;
  signatureBuyer: string;
  signatureSeller: string;
};

export interface ExchangeInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "NAME"
      | "ORDER_TYPEHASH"
      | "SPTOKEN"
      | "VERSION"
      | "_execute"
      | "blockRange"
      | "cancelOrder"
      | "cancelledOrFilled"
      | "close"
      | "eip712Domain"
      | "execute"
      | "executionDelegate"
      | "incrementNonce"
      | "initialize"
      | "isInternal"
      | "isOpen"
      | "nonces"
      | "open"
      | "owner"
      | "remainingETH"
      | "renounceOwnership"
      | "setBlockRange"
      | "setExecutionDelegate"
      | "transferOwnership"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Closed"
      | "ConsumeGas"
      | "EIP712DomainChanged"
      | "Initialized"
      | "NewBlockRange"
      | "NewExecutionDelegate"
      | "NewGovernor"
      | "NonceIncremented"
      | "Opened"
      | "OrderCancelled"
      | "OrdersMatched"
      | "OwnershipTransferred"
  ): EventFragment;

  encodeFunctionData(functionFragment: "NAME", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ORDER_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "SPTOKEN", values?: undefined): string;
  encodeFunctionData(functionFragment: "VERSION", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "_execute",
    values: [InputStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "blockRange",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "cancelOrder",
    values: [OrderStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelledOrFilled",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "close", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "eip712Domain",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "execute",
    values: [InputStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "executionDelegate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "incrementNonce",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isInternal",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "isOpen", values?: undefined): string;
  encodeFunctionData(functionFragment: "nonces", values: [AddressLike]): string;
  encodeFunctionData(functionFragment: "open", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "remainingETH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setBlockRange",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setExecutionDelegate",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "NAME", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ORDER_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "SPTOKEN", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "VERSION", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_execute", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "blockRange", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancelOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelledOrFilled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "close", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "eip712Domain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "execute", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "executionDelegate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "incrementNonce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isInternal", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isOpen", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nonces", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "open", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "remainingETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBlockRange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setExecutionDelegate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
}

export namespace ClosedEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ConsumeGasEvent {
  export type InputTuple = [consumer: AddressLike, amount: BigNumberish];
  export type OutputTuple = [consumer: string, amount: bigint];
  export interface OutputObject {
    consumer: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EIP712DomainChangedEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewBlockRangeEvent {
  export type InputTuple = [blockRange: BigNumberish];
  export type OutputTuple = [blockRange: bigint];
  export interface OutputObject {
    blockRange: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewExecutionDelegateEvent {
  export type InputTuple = [executionDelegate: AddressLike];
  export type OutputTuple = [executionDelegate: string];
  export interface OutputObject {
    executionDelegate: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewGovernorEvent {
  export type InputTuple = [governor: AddressLike];
  export type OutputTuple = [governor: string];
  export interface OutputObject {
    governor: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NonceIncrementedEvent {
  export type InputTuple = [trader: AddressLike, newNonce: BigNumberish];
  export type OutputTuple = [trader: string, newNonce: bigint];
  export interface OutputObject {
    trader: string;
    newNonce: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OpenedEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OrderCancelledEvent {
  export type InputTuple = [hash: BytesLike];
  export type OutputTuple = [hash: string];
  export interface OutputObject {
    hash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OrdersMatchedEvent {
  export type InputTuple = [
    maker: AddressLike,
    taker: AddressLike,
    order: OrderStruct
  ];
  export type OutputTuple = [
    maker: string,
    taker: string,
    order: OrderStructOutput
  ];
  export interface OutputObject {
    maker: string;
    taker: string;
    order: OrderStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Exchange extends BaseContract {
  connect(runner?: ContractRunner | null): Exchange;
  waitForDeployment(): Promise<this>;

  interface: ExchangeInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  NAME: TypedContractMethod<[], [string], "view">;

  ORDER_TYPEHASH: TypedContractMethod<[], [string], "view">;

  SPTOKEN: TypedContractMethod<[], [string], "view">;

  VERSION: TypedContractMethod<[], [string], "view">;

  _execute: TypedContractMethod<[input: InputStruct], [void], "payable">;

  blockRange: TypedContractMethod<[], [bigint], "view">;

  cancelOrder: TypedContractMethod<[order: OrderStruct], [void], "nonpayable">;

  cancelledOrFilled: TypedContractMethod<[arg0: BytesLike], [boolean], "view">;

  close: TypedContractMethod<[], [void], "nonpayable">;

  eip712Domain: TypedContractMethod<
    [],
    [
      [string, string, string, bigint, string, string, bigint[]] & {
        fields: string;
        name: string;
        version: string;
        chainId: bigint;
        verifyingContract: string;
        salt: string;
        extensions: bigint[];
      }
    ],
    "view"
  >;

  execute: TypedContractMethod<[order: InputStruct], [void], "payable">;

  executionDelegate: TypedContractMethod<[], [string], "view">;

  incrementNonce: TypedContractMethod<[], [void], "nonpayable">;

  initialize: TypedContractMethod<
    [_owner: AddressLike, _executionDelegate: AddressLike],
    [void],
    "nonpayable"
  >;

  isInternal: TypedContractMethod<[], [boolean], "view">;

  isOpen: TypedContractMethod<[], [bigint], "view">;

  nonces: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  open: TypedContractMethod<[], [void], "nonpayable">;

  owner: TypedContractMethod<[], [string], "view">;

  remainingETH: TypedContractMethod<[], [bigint], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setBlockRange: TypedContractMethod<
    [_blockRange: BigNumberish],
    [void],
    "nonpayable"
  >;

  setExecutionDelegate: TypedContractMethod<
    [_executionDelegate: AddressLike],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "NAME"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ORDER_TYPEHASH"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "SPTOKEN"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "VERSION"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "_execute"
  ): TypedContractMethod<[input: InputStruct], [void], "payable">;
  getFunction(
    nameOrSignature: "blockRange"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "cancelOrder"
  ): TypedContractMethod<[order: OrderStruct], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "cancelledOrFilled"
  ): TypedContractMethod<[arg0: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "close"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "eip712Domain"
  ): TypedContractMethod<
    [],
    [
      [string, string, string, bigint, string, string, bigint[]] & {
        fields: string;
        name: string;
        version: string;
        chainId: bigint;
        verifyingContract: string;
        salt: string;
        extensions: bigint[];
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "execute"
  ): TypedContractMethod<[order: InputStruct], [void], "payable">;
  getFunction(
    nameOrSignature: "executionDelegate"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "incrementNonce"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [_owner: AddressLike, _executionDelegate: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "isInternal"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "isOpen"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "nonces"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "open"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "remainingETH"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setBlockRange"
  ): TypedContractMethod<[_blockRange: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setExecutionDelegate"
  ): TypedContractMethod<
    [_executionDelegate: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "Closed"
  ): TypedContractEvent<
    ClosedEvent.InputTuple,
    ClosedEvent.OutputTuple,
    ClosedEvent.OutputObject
  >;
  getEvent(
    key: "ConsumeGas"
  ): TypedContractEvent<
    ConsumeGasEvent.InputTuple,
    ConsumeGasEvent.OutputTuple,
    ConsumeGasEvent.OutputObject
  >;
  getEvent(
    key: "EIP712DomainChanged"
  ): TypedContractEvent<
    EIP712DomainChangedEvent.InputTuple,
    EIP712DomainChangedEvent.OutputTuple,
    EIP712DomainChangedEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "NewBlockRange"
  ): TypedContractEvent<
    NewBlockRangeEvent.InputTuple,
    NewBlockRangeEvent.OutputTuple,
    NewBlockRangeEvent.OutputObject
  >;
  getEvent(
    key: "NewExecutionDelegate"
  ): TypedContractEvent<
    NewExecutionDelegateEvent.InputTuple,
    NewExecutionDelegateEvent.OutputTuple,
    NewExecutionDelegateEvent.OutputObject
  >;
  getEvent(
    key: "NewGovernor"
  ): TypedContractEvent<
    NewGovernorEvent.InputTuple,
    NewGovernorEvent.OutputTuple,
    NewGovernorEvent.OutputObject
  >;
  getEvent(
    key: "NonceIncremented"
  ): TypedContractEvent<
    NonceIncrementedEvent.InputTuple,
    NonceIncrementedEvent.OutputTuple,
    NonceIncrementedEvent.OutputObject
  >;
  getEvent(
    key: "Opened"
  ): TypedContractEvent<
    OpenedEvent.InputTuple,
    OpenedEvent.OutputTuple,
    OpenedEvent.OutputObject
  >;
  getEvent(
    key: "OrderCancelled"
  ): TypedContractEvent<
    OrderCancelledEvent.InputTuple,
    OrderCancelledEvent.OutputTuple,
    OrderCancelledEvent.OutputObject
  >;
  getEvent(
    key: "OrdersMatched"
  ): TypedContractEvent<
    OrdersMatchedEvent.InputTuple,
    OrdersMatchedEvent.OutputTuple,
    OrdersMatchedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;

  filters: {
    "Closed()": TypedContractEvent<
      ClosedEvent.InputTuple,
      ClosedEvent.OutputTuple,
      ClosedEvent.OutputObject
    >;
    Closed: TypedContractEvent<
      ClosedEvent.InputTuple,
      ClosedEvent.OutputTuple,
      ClosedEvent.OutputObject
    >;

    "ConsumeGas(address,uint256)": TypedContractEvent<
      ConsumeGasEvent.InputTuple,
      ConsumeGasEvent.OutputTuple,
      ConsumeGasEvent.OutputObject
    >;
    ConsumeGas: TypedContractEvent<
      ConsumeGasEvent.InputTuple,
      ConsumeGasEvent.OutputTuple,
      ConsumeGasEvent.OutputObject
    >;

    "EIP712DomainChanged()": TypedContractEvent<
      EIP712DomainChangedEvent.InputTuple,
      EIP712DomainChangedEvent.OutputTuple,
      EIP712DomainChangedEvent.OutputObject
    >;
    EIP712DomainChanged: TypedContractEvent<
      EIP712DomainChangedEvent.InputTuple,
      EIP712DomainChangedEvent.OutputTuple,
      EIP712DomainChangedEvent.OutputObject
    >;

    "Initialized(uint64)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "NewBlockRange(uint256)": TypedContractEvent<
      NewBlockRangeEvent.InputTuple,
      NewBlockRangeEvent.OutputTuple,
      NewBlockRangeEvent.OutputObject
    >;
    NewBlockRange: TypedContractEvent<
      NewBlockRangeEvent.InputTuple,
      NewBlockRangeEvent.OutputTuple,
      NewBlockRangeEvent.OutputObject
    >;

    "NewExecutionDelegate(address)": TypedContractEvent<
      NewExecutionDelegateEvent.InputTuple,
      NewExecutionDelegateEvent.OutputTuple,
      NewExecutionDelegateEvent.OutputObject
    >;
    NewExecutionDelegate: TypedContractEvent<
      NewExecutionDelegateEvent.InputTuple,
      NewExecutionDelegateEvent.OutputTuple,
      NewExecutionDelegateEvent.OutputObject
    >;

    "NewGovernor(address)": TypedContractEvent<
      NewGovernorEvent.InputTuple,
      NewGovernorEvent.OutputTuple,
      NewGovernorEvent.OutputObject
    >;
    NewGovernor: TypedContractEvent<
      NewGovernorEvent.InputTuple,
      NewGovernorEvent.OutputTuple,
      NewGovernorEvent.OutputObject
    >;

    "NonceIncremented(address,uint256)": TypedContractEvent<
      NonceIncrementedEvent.InputTuple,
      NonceIncrementedEvent.OutputTuple,
      NonceIncrementedEvent.OutputObject
    >;
    NonceIncremented: TypedContractEvent<
      NonceIncrementedEvent.InputTuple,
      NonceIncrementedEvent.OutputTuple,
      NonceIncrementedEvent.OutputObject
    >;

    "Opened()": TypedContractEvent<
      OpenedEvent.InputTuple,
      OpenedEvent.OutputTuple,
      OpenedEvent.OutputObject
    >;
    Opened: TypedContractEvent<
      OpenedEvent.InputTuple,
      OpenedEvent.OutputTuple,
      OpenedEvent.OutputObject
    >;

    "OrderCancelled(bytes32)": TypedContractEvent<
      OrderCancelledEvent.InputTuple,
      OrderCancelledEvent.OutputTuple,
      OrderCancelledEvent.OutputObject
    >;
    OrderCancelled: TypedContractEvent<
      OrderCancelledEvent.InputTuple,
      OrderCancelledEvent.OutputTuple,
      OrderCancelledEvent.OutputObject
    >;

    "OrdersMatched(address,address,tuple)": TypedContractEvent<
      OrdersMatchedEvent.InputTuple,
      OrdersMatchedEvent.OutputTuple,
      OrdersMatchedEvent.OutputObject
    >;
    OrdersMatched: TypedContractEvent<
      OrdersMatchedEvent.InputTuple,
      OrdersMatchedEvent.OutputTuple,
      OrdersMatchedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
  };
}
