/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface ExecutionDelegateInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "approveContract"
      | "contracts"
      | "denyContract"
      | "grantApproval"
      | "owner"
      | "renounceOwnership"
      | "revokeApproval"
      | "revokedApproval"
      | "transferERC1155"
      | "transferERC20"
      | "transferERC721"
      | "transferERC721Unsafe"
      | "transferOwnership"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ApproveContract"
      | "DenyContract"
      | "GrantApproval"
      | "OwnershipTransferred"
      | "RevokeApproval"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "approveContract",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "contracts",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "denyContract",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantApproval",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "revokeApproval",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "revokedApproval",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferERC1155",
    values: [AddressLike, AddressLike, AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferERC20",
    values: [AddressLike, AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferERC721",
    values: [AddressLike, AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferERC721Unsafe",
    values: [AddressLike, AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "approveContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "contracts", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "denyContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "grantApproval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeApproval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokedApproval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferERC1155",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferERC721",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferERC721Unsafe",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
}

export namespace ApproveContractEvent {
  export type InputTuple = [_contract: AddressLike];
  export type OutputTuple = [_contract: string];
  export interface OutputObject {
    _contract: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DenyContractEvent {
  export type InputTuple = [_contract: AddressLike];
  export type OutputTuple = [_contract: string];
  export interface OutputObject {
    _contract: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GrantApprovalEvent {
  export type InputTuple = [user: AddressLike];
  export type OutputTuple = [user: string];
  export interface OutputObject {
    user: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RevokeApprovalEvent {
  export type InputTuple = [user: AddressLike];
  export type OutputTuple = [user: string];
  export interface OutputObject {
    user: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ExecutionDelegate extends BaseContract {
  connect(runner?: ContractRunner | null): ExecutionDelegate;
  waitForDeployment(): Promise<this>;

  interface: ExecutionDelegateInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  approveContract: TypedContractMethod<
    [_contract: AddressLike],
    [void],
    "nonpayable"
  >;

  contracts: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  denyContract: TypedContractMethod<
    [_contract: AddressLike],
    [void],
    "nonpayable"
  >;

  grantApproval: TypedContractMethod<[], [void], "nonpayable">;

  owner: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  revokeApproval: TypedContractMethod<[], [void], "nonpayable">;

  revokedApproval: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  transferERC1155: TypedContractMethod<
    [
      collection: AddressLike,
      from: AddressLike,
      to: AddressLike,
      tokenId: BigNumberish,
      amount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  transferERC20: TypedContractMethod<
    [
      token: AddressLike,
      from: AddressLike,
      to: AddressLike,
      amount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  transferERC721: TypedContractMethod<
    [
      collection: AddressLike,
      from: AddressLike,
      to: AddressLike,
      tokenId: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  transferERC721Unsafe: TypedContractMethod<
    [
      collection: AddressLike,
      from: AddressLike,
      to: AddressLike,
      tokenId: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "approveContract"
  ): TypedContractMethod<[_contract: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "contracts"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "denyContract"
  ): TypedContractMethod<[_contract: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "grantApproval"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "revokeApproval"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "revokedApproval"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "transferERC1155"
  ): TypedContractMethod<
    [
      collection: AddressLike,
      from: AddressLike,
      to: AddressLike,
      tokenId: BigNumberish,
      amount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferERC20"
  ): TypedContractMethod<
    [
      token: AddressLike,
      from: AddressLike,
      to: AddressLike,
      amount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferERC721"
  ): TypedContractMethod<
    [
      collection: AddressLike,
      from: AddressLike,
      to: AddressLike,
      tokenId: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferERC721Unsafe"
  ): TypedContractMethod<
    [
      collection: AddressLike,
      from: AddressLike,
      to: AddressLike,
      tokenId: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "ApproveContract"
  ): TypedContractEvent<
    ApproveContractEvent.InputTuple,
    ApproveContractEvent.OutputTuple,
    ApproveContractEvent.OutputObject
  >;
  getEvent(
    key: "DenyContract"
  ): TypedContractEvent<
    DenyContractEvent.InputTuple,
    DenyContractEvent.OutputTuple,
    DenyContractEvent.OutputObject
  >;
  getEvent(
    key: "GrantApproval"
  ): TypedContractEvent<
    GrantApprovalEvent.InputTuple,
    GrantApprovalEvent.OutputTuple,
    GrantApprovalEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "RevokeApproval"
  ): TypedContractEvent<
    RevokeApprovalEvent.InputTuple,
    RevokeApprovalEvent.OutputTuple,
    RevokeApprovalEvent.OutputObject
  >;

  filters: {
    "ApproveContract(address)": TypedContractEvent<
      ApproveContractEvent.InputTuple,
      ApproveContractEvent.OutputTuple,
      ApproveContractEvent.OutputObject
    >;
    ApproveContract: TypedContractEvent<
      ApproveContractEvent.InputTuple,
      ApproveContractEvent.OutputTuple,
      ApproveContractEvent.OutputObject
    >;

    "DenyContract(address)": TypedContractEvent<
      DenyContractEvent.InputTuple,
      DenyContractEvent.OutputTuple,
      DenyContractEvent.OutputObject
    >;
    DenyContract: TypedContractEvent<
      DenyContractEvent.InputTuple,
      DenyContractEvent.OutputTuple,
      DenyContractEvent.OutputObject
    >;

    "GrantApproval(address)": TypedContractEvent<
      GrantApprovalEvent.InputTuple,
      GrantApprovalEvent.OutputTuple,
      GrantApprovalEvent.OutputObject
    >;
    GrantApproval: TypedContractEvent<
      GrantApprovalEvent.InputTuple,
      GrantApprovalEvent.OutputTuple,
      GrantApprovalEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "RevokeApproval(address)": TypedContractEvent<
      RevokeApprovalEvent.InputTuple,
      RevokeApprovalEvent.OutputTuple,
      RevokeApprovalEvent.OutputObject
    >;
    RevokeApproval: TypedContractEvent<
      RevokeApprovalEvent.InputTuple,
      RevokeApprovalEvent.OutputTuple,
      RevokeApprovalEvent.OutputObject
    >;
  };
}
